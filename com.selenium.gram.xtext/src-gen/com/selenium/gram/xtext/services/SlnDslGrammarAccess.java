/*
* generated by Xtext
*/
package com.selenium.gram.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SlnDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubsSubprocedureParserRuleCall_0_0 = (RuleCall)cSubsAssignment_0.eContents().get(0);
		private final Keyword cMainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefsDefinitionParserRuleCall_2_0 = (RuleCall)cDefsAssignment_2.eContents().get(0);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainInstructionParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Keyword cEndmainKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Le modele
		// * / Model:
		//	subs+=Subprocedure* "main" defs+=Definition* main+=Instruction+ "endmain";
		public ParserRule getRule() { return rule; }

		//subs+=Subprocedure* "main" defs+=Definition* main+=Instruction+ "endmain"
		public Group getGroup() { return cGroup; }

		//subs+=Subprocedure*
		public Assignment getSubsAssignment_0() { return cSubsAssignment_0; }

		//Subprocedure
		public RuleCall getSubsSubprocedureParserRuleCall_0_0() { return cSubsSubprocedureParserRuleCall_0_0; }

		//"main"
		public Keyword getMainKeyword_1() { return cMainKeyword_1; }

		//defs+=Definition*
		public Assignment getDefsAssignment_2() { return cDefsAssignment_2; }

		//Definition
		public RuleCall getDefsDefinitionParserRuleCall_2_0() { return cDefsDefinitionParserRuleCall_2_0; }

		//main+=Instruction+
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }

		//Instruction
		public RuleCall getMainInstructionParserRuleCall_3_0() { return cMainInstructionParserRuleCall_3_0; }

		//"endmain"
		public Keyword getEndmainKeyword_4() { return cEndmainKeyword_4; }
	}

	public class SubprocedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subprocedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadHeadParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Assignment cDefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefsDefinitionParserRuleCall_2_0 = (RuleCall)cDefsAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyInstructionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cEndsubKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Subprocedure:
		//	"sub" head=Head defs+=Definition* body+=Instruction+ "endsub";
		public ParserRule getRule() { return rule; }

		//"sub" head=Head defs+=Definition* body+=Instruction+ "endsub"
		public Group getGroup() { return cGroup; }

		//"sub"
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }

		//head=Head
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }

		//Head
		public RuleCall getHeadHeadParserRuleCall_1_0() { return cHeadHeadParserRuleCall_1_0; }

		//defs+=Definition*
		public Assignment getDefsAssignment_2() { return cDefsAssignment_2; }

		//Definition
		public RuleCall getDefsDefinitionParserRuleCall_2_0() { return cDefsDefinitionParserRuleCall_2_0; }

		//body+=Instruction+
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_3_0() { return cBodyInstructionParserRuleCall_3_0; }

		//"endsub"
		public Keyword getEndsubKeyword_4() { return cEndsubKeyword_4; }
	}

	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cVarKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArgsIDAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArgsIDVariableNameParserRuleCall_1_3_0 = (RuleCall)cArgsIDAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cVarKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cArgsIDAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cArgsIDVariableNameParserRuleCall_1_4_2_0 = (RuleCall)cArgsIDAssignment_1_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Head:
		//	name=FunctionName "()" | name=FunctionName "(" "var" argsID+=VariableName ("," "var" argsID+=VariableName)* ")";
		public ParserRule getRule() { return rule; }

		//name=FunctionName "()" | name=FunctionName "(" "var" argsID+=VariableName ("," "var" argsID+=VariableName)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=FunctionName "()"
		public Group getGroup_0() { return cGroup_0; }

		//name=FunctionName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_0_0_0() { return cNameFunctionNameParserRuleCall_0_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1() { return cLeftParenthesisRightParenthesisKeyword_0_1; }

		//name=FunctionName "(" "var" argsID+=VariableName ("," "var" argsID+=VariableName)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//name=FunctionName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_1_0_0() { return cNameFunctionNameParserRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"var"
		public Keyword getVarKeyword_1_2() { return cVarKeyword_1_2; }

		//argsID+=VariableName
		public Assignment getArgsIDAssignment_1_3() { return cArgsIDAssignment_1_3; }

		//VariableName
		public RuleCall getArgsIDVariableNameParserRuleCall_1_3_0() { return cArgsIDVariableNameParserRuleCall_1_3_0; }

		//("," "var" argsID+=VariableName)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//"var"
		public Keyword getVarKeyword_1_4_1() { return cVarKeyword_1_4_1; }

		//argsID+=VariableName
		public Assignment getArgsIDAssignment_1_4_2() { return cArgsIDAssignment_1_4_2; }

		//VariableName
		public RuleCall getArgsIDVariableNameParserRuleCall_1_4_2_0() { return cArgsIDVariableNameParserRuleCall_1_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class FunctionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionReference");
		private final Assignment cFunctionNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFunctionNameFunctionNameCrossReference_0 = (CrossReference)cFunctionNameAssignment.eContents().get(0);
		private final RuleCall cFunctionNameFunctionNameIDTerminalRuleCall_0_1 = (RuleCall)cFunctionNameFunctionNameCrossReference_0.eContents().get(1);
		
		/// *
		// * Subprocedure
		// * / FunctionReference:
		//	functionName=[FunctionName];
		public ParserRule getRule() { return rule; }

		//functionName=[FunctionName]
		public Assignment getFunctionNameAssignment() { return cFunctionNameAssignment; }

		//[FunctionName]
		public CrossReference getFunctionNameFunctionNameCrossReference_0() { return cFunctionNameFunctionNameCrossReference_0; }

		//ID
		public RuleCall getFunctionNameFunctionNameIDTerminalRuleCall_0_1() { return cFunctionNameFunctionNameIDTerminalRuleCall_0_1; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRefFunctionReferenceParserRuleCall_0_0_0 = (RuleCall)cRefAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRefFunctionReferenceParserRuleCall_1_0_0 = (RuleCall)cRefAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_0 = (RuleCall)cArgsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//FunctionCall:
		//	ref=FunctionReference "()" | ref=FunctionReference "(" args+=Expression ("," args+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//ref=FunctionReference "()" | ref=FunctionReference "(" args+=Expression ("," args+=Expression)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref=FunctionReference "()"
		public Group getGroup_0() { return cGroup_0; }

		//ref=FunctionReference
		public Assignment getRefAssignment_0_0() { return cRefAssignment_0_0; }

		//FunctionReference
		public RuleCall getRefFunctionReferenceParserRuleCall_0_0_0() { return cRefFunctionReferenceParserRuleCall_0_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1() { return cLeftParenthesisRightParenthesisKeyword_0_1; }

		//ref=FunctionReference "(" args+=Expression ("," args+=Expression)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//ref=FunctionReference
		public Assignment getRefAssignment_1_0() { return cRefAssignment_1_0; }

		//FunctionReference
		public RuleCall getRefFunctionReferenceParserRuleCall_1_0_0() { return cRefFunctionReferenceParserRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//args+=Expression
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_2_0() { return cArgsExpressionParserRuleCall_1_2_0; }

		//("," args+=Expression)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_3_1() { return cArgsAssignment_1_3_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_0() { return cArgsExpressionParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVarIDAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarIDVariableNameCrossReference_0 = (CrossReference)cVarIDAssignment.eContents().get(0);
		private final RuleCall cVarIDVariableNameIDTerminalRuleCall_0_1 = (RuleCall)cVarIDVariableNameCrossReference_0.eContents().get(1);
		
		/// *
		// * Variables
		// * / VariableReference:
		//	varID=[VariableName];
		public ParserRule getRule() { return rule; }

		//varID=[VariableName]
		public Assignment getVarIDAssignment() { return cVarIDAssignment; }

		//[VariableName]
		public CrossReference getVarIDVariableNameCrossReference_0() { return cVarIDVariableNameCrossReference_0; }

		//ID
		public RuleCall getVarIDVariableNameIDTerminalRuleCall_0_1() { return cVarIDVariableNameIDTerminalRuleCall_0_1; }
	}

	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberLiteral:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cActionSelectExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		// * Expression
		// * / Expression:
		//	VariableReference | NumLiteralExpression | ListExpression | BooleanExpression | ActionSelectExpression;
		public ParserRule getRule() { return rule; }

		//VariableReference | NumLiteralExpression | ListExpression | BooleanExpression | ActionSelectExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }

		//NumLiteralExpression
		public RuleCall getNumLiteralExpressionParserRuleCall_1() { return cNumLiteralExpressionParserRuleCall_1; }

		//ListExpression
		public RuleCall getListExpressionParserRuleCall_2() { return cListExpressionParserRuleCall_2; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_3() { return cBooleanExpressionParserRuleCall_3; }

		//ActionSelectExpression
		public RuleCall getActionSelectExpressionParserRuleCall_4() { return cActionSelectExpressionParserRuleCall_4; }
	}

	public class NumLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumLiteralExpression:
		//	value=NumberLiteral;
		public ParserRule getRule() { return rule; }

		//value=NumberLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NumberLiteral
		public RuleCall getValueNumberLiteralParserRuleCall_0() { return cValueNumberLiteralParserRuleCall_0; }
	}

	public class ListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListExpression:
		//	"sizeof" "(" exp=Expression ")";
		public ParserRule getRule() { return rule; }

		//"sizeof" "(" exp=Expression ")"
		public Group getGroup() { return cGroup; }

		//"sizeof"
		public Keyword getSizeofKeyword_0() { return cSizeofKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BooleanListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanListExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpBooleanListOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarNameVariableNameParserRuleCall_3_0 = (RuleCall)cVarNameAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpExpressionParserRuleCall_5_0 = (RuleCall)cExpAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BooleanListExpression:
		//	op=BooleanListOperator "(" "var" varName=VariableName "->" exp=Expression ")";
		public ParserRule getRule() { return rule; }

		//op=BooleanListOperator "(" "var" varName=VariableName "->" exp=Expression ")"
		public Group getGroup() { return cGroup; }

		//op=BooleanListOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//BooleanListOperator
		public RuleCall getOpBooleanListOperatorParserRuleCall_0_0() { return cOpBooleanListOperatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//varName=VariableName
		public Assignment getVarNameAssignment_3() { return cVarNameAssignment_3; }

		//VariableName
		public RuleCall getVarNameVariableNameParserRuleCall_3_0() { return cVarNameVariableNameParserRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//exp=Expression
		public Assignment getExpAssignment_5() { return cExpAssignment_5; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_5_0() { return cExpExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class BooleanListOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanListOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAnyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanListOperator:
		//	"All" | "Any";
		public ParserRule getRule() { return rule; }

		//"All" | "Any"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"All"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//"Any"
		public Keyword getAnyKeyword_1() { return cAnyKeyword_1; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpBinaryBooleanExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpNegationExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpVerifyActionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Assignment cExpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cExpExistActionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Assignment cExpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cExpBooleanListExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		
		//BooleanExpression:
		//	exp=BinaryBooleanExpression | exp=NegationExpression | exp=VerifyAction | exp=ExistAction |
		//	exp=BooleanListExpression;
		public ParserRule getRule() { return rule; }

		//exp=BinaryBooleanExpression | exp=NegationExpression | exp=VerifyAction | exp=ExistAction | exp=BooleanListExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//exp=BinaryBooleanExpression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }

		//BinaryBooleanExpression
		public RuleCall getExpBinaryBooleanExpressionParserRuleCall_0_0() { return cExpBinaryBooleanExpressionParserRuleCall_0_0; }

		//exp=NegationExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//NegationExpression
		public RuleCall getExpNegationExpressionParserRuleCall_1_0() { return cExpNegationExpressionParserRuleCall_1_0; }

		//exp=VerifyAction
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//VerifyAction
		public RuleCall getExpVerifyActionParserRuleCall_2_0() { return cExpVerifyActionParserRuleCall_2_0; }

		//exp=ExistAction
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//ExistAction
		public RuleCall getExpExistActionParserRuleCall_3_0() { return cExpExistActionParserRuleCall_3_0; }

		//exp=BooleanListExpression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//BooleanListExpression
		public RuleCall getExpBooleanListExpressionParserRuleCall_4_0() { return cExpBooleanListExpressionParserRuleCall_4_0; }
	}

	public class VerifyActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerifyAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameElementNumberLiteralParserRuleCall_2_0 = (RuleCall)cNameElementAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VerifyAction:
		//	"verify" "(" nameElement=NumberLiteral "," value=Expression ")";
		public ParserRule getRule() { return rule; }

		//"verify" "(" nameElement=NumberLiteral "," value=Expression ")"
		public Group getGroup() { return cGroup; }

		//"verify"
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//nameElement=NumberLiteral
		public Assignment getNameElementAssignment_2() { return cNameElementAssignment_2; }

		//NumberLiteral
		public RuleCall getNameElementNumberLiteralParserRuleCall_2_0() { return cNameElementNumberLiteralParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ExistActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameElementNumberLiteralParserRuleCall_2_0 = (RuleCall)cNameElementAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExistAction:
		//	"exist" "(" nameElement=NumberLiteral ")";
		public ParserRule getRule() { return rule; }

		//"exist" "(" nameElement=NumberLiteral ")"
		public Group getGroup() { return cGroup; }

		//"exist"
		public Keyword getExistKeyword_0() { return cExistKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//nameElement=NumberLiteral
		public Assignment getNameElementAssignment_2() { return cNameElementAssignment_2; }

		//NumberLiteral
		public RuleCall getNameElementNumberLiteralParserRuleCall_2_0() { return cNameElementNumberLiteralParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BinaryBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpBooleanOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BinaryBooleanExpression:
		//	op=BooleanOperator left=Expression right=Expression;
		public ParserRule getRule() { return rule; }

		//op=BooleanOperator left=Expression right=Expression
		public Group getGroup() { return cGroup; }

		//op=BooleanOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//BooleanOperator
		public RuleCall getOpBooleanOperatorParserRuleCall_0_0() { return cOpBooleanOperatorParserRuleCall_0_0; }

		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }

		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}

	public class NegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//NegationExpression:
		//	"!" exp=Expression;
		public ParserRule getRule() { return rule; }

		//"!" exp=Expression
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BooleanOperator:
		//	"==" | "<" | ">";
		public ParserRule getRule() { return rule; }

		//"==" | "<" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionInstructionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		// * Type of Instruction
		// * / Instruction:
		//	FunctionCall | Conditional | Loop | ActionInstruction | Assignation;
		public ParserRule getRule() { return rule; }

		//FunctionCall | Conditional | Loop | ActionInstruction | Assignation
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0() { return cFunctionCallParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }

		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }

		//ActionInstruction
		public RuleCall getActionInstructionParserRuleCall_3() { return cActionInstructionParserRuleCall_3; }

		//Assignation
		public RuleCall getAssignationParserRuleCall_4() { return cAssignationParserRuleCall_4; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDVariableNameParserRuleCall_1_0 = (RuleCall)cVarIDAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Definition:
		//	"var" varID=VariableName "=" exp=Expression;
		public ParserRule getRule() { return rule; }

		//"var" varID=VariableName "=" exp=Expression
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//varID=VariableName
		public Assignment getVarIDAssignment_1() { return cVarIDAssignment_1; }

		//VariableName
		public RuleCall getVarIDVariableNameParserRuleCall_1_0() { return cVarIDVariableNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}

	public class AssignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableReferenceParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Assignation:
		//	var=VariableReference "=" exp=Expression;
		public ParserRule getRule() { return rule; }

		//var=VariableReference "=" exp=Expression
		public Group getGroup() { return cGroup; }

		//var=VariableReference
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//VariableReference
		public RuleCall getVarVariableReferenceParserRuleCall_0_0() { return cVarVariableReferenceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrueInsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueInsInstructionParserRuleCall_3_0 = (RuleCall)cTrueInsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFalseInsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFalseInsInstructionParserRuleCall_4_1_0 = (RuleCall)cFalseInsAssignment_4_1.eContents().get(0);
		private final Keyword cEndifKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conditional:
		//	"if" exp=Expression "then" trueIns+=Instruction+ ("else" falseIns+=Instruction+)? "endif";
		public ParserRule getRule() { return rule; }

		//"if" exp=Expression "then" trueIns+=Instruction+ ("else" falseIns+=Instruction+)? "endif"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//trueIns+=Instruction+
		public Assignment getTrueInsAssignment_3() { return cTrueInsAssignment_3; }

		//Instruction
		public RuleCall getTrueInsInstructionParserRuleCall_3_0() { return cTrueInsInstructionParserRuleCall_3_0; }

		//("else" falseIns+=Instruction+)?
		public Group getGroup_4() { return cGroup_4; }

		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//falseIns+=Instruction+
		public Assignment getFalseInsAssignment_4_1() { return cFalseInsAssignment_4_1; }

		//Instruction
		public RuleCall getFalseInsInstructionParserRuleCall_4_1_0() { return cFalseInsInstructionParserRuleCall_4_1_0; }

		//"endif"
		public Keyword getEndifKeyword_5() { return cEndifKeyword_5; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForeachParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Loop et Conditional
		// * / Loop:
		//	While | Foreach;
		public ParserRule getRule() { return rule; }

		//While | Foreach
		public Alternatives getAlternatives() { return cAlternatives; }

		//While
		public RuleCall getWhileParserRuleCall_0() { return cWhileParserRuleCall_0; }

		//Foreach
		public RuleCall getForeachParserRuleCall_1() { return cForeachParserRuleCall_1; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInsInstructionParserRuleCall_5_0 = (RuleCall)cInsAssignment_5.eContents().get(0);
		private final Keyword cEndwhileKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//While:
		//	"while" "(" cond=Expression ")" "do" ins+=Instruction+ "endwhile";
		public ParserRule getRule() { return rule; }

		//"while" "(" cond=Expression ")" "do" ins+=Instruction+ "endwhile"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//ins+=Instruction+
		public Assignment getInsAssignment_5() { return cInsAssignment_5; }

		//Instruction
		public RuleCall getInsInstructionParserRuleCall_5_0() { return cInsInstructionParserRuleCall_5_0; }

		//"endwhile"
		public Keyword getEndwhileKeyword_6() { return cEndwhileKeyword_6; }
	}

	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableNameParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInsInstructionParserRuleCall_7_0 = (RuleCall)cInsAssignment_7.eContents().get(0);
		private final Keyword cEndforKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Foreach:
		//	"foreach" "(" var=VariableName "in" exp=Expression ")" "do" ins+=Instruction+ "endfor";
		public ParserRule getRule() { return rule; }

		//"foreach" "(" var=VariableName "in" exp=Expression ")" "do" ins+=Instruction+ "endfor"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=VariableName
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//VariableName
		public RuleCall getVarVariableNameParserRuleCall_2_0() { return cVarVariableNameParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//exp=Expression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_0() { return cExpExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"do"
		public Keyword getDoKeyword_6() { return cDoKeyword_6; }

		//ins+=Instruction+
		public Assignment getInsAssignment_7() { return cInsAssignment_7; }

		//Instruction
		public RuleCall getInsInstructionParserRuleCall_7_0() { return cInsInstructionParserRuleCall_7_0; }

		//"endfor"
		public Keyword getEndforKeyword_8() { return cEndforKeyword_8; }
	}

	public class ActionInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cActionActionOpenParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cActionActionClickParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cActionActionCheckParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cActionActionTypeParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//ActionInstruction:
		//	action=ActionOpen | action=ActionClick | action=ActionCheck | action=ActionType;
		public ParserRule getRule() { return rule; }

		//action=ActionOpen | action=ActionClick | action=ActionCheck | action=ActionType
		public Alternatives getAlternatives() { return cAlternatives; }

		//action=ActionOpen
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//ActionOpen
		public RuleCall getActionActionOpenParserRuleCall_0_0() { return cActionActionOpenParserRuleCall_0_0; }

		//action=ActionClick
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//ActionClick
		public RuleCall getActionActionClickParserRuleCall_1_0() { return cActionActionClickParserRuleCall_1_0; }

		//action=ActionCheck
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }

		//ActionCheck
		public RuleCall getActionActionCheckParserRuleCall_2_0() { return cActionActionCheckParserRuleCall_2_0; }

		//action=ActionType
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//ActionType
		public RuleCall getActionActionTypeParserRuleCall_3_0() { return cActionActionTypeParserRuleCall_3_0; }
	}

	public class ActionClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionClick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeClickableElementParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementNumberLiteralParserRuleCall_4_0 = (RuleCall)cElementAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ActionClick:
		//	"click" "(" type=ClickableElement "," element=NumberLiteral ")";
		public ParserRule getRule() { return rule; }

		//"click" "(" type=ClickableElement "," element=NumberLiteral ")"
		public Group getGroup() { return cGroup; }

		//"click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=ClickableElement
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ClickableElement
		public RuleCall getTypeClickableElementParserRuleCall_2_0() { return cTypeClickableElementParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//element=NumberLiteral
		public Assignment getElementAssignment_4() { return cElementAssignment_4; }

		//NumberLiteral
		public RuleCall getElementNumberLiteralParserRuleCall_4_0() { return cElementNumberLiteralParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ActionOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlURLTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActionOpen:
		//	"open" "(" url=URL ")";
		public ParserRule getRule() { return rule; }

		//"open" "(" url=URL ")"
		public Group getGroup() { return cGroup; }

		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//url=URL
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//URL
		public RuleCall getUrlURLTerminalRuleCall_2_0() { return cUrlURLTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ActionCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeClickableElementParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementNumberLiteralParserRuleCall_4_0 = (RuleCall)cElementAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ActionCheck:
		//	"check" "(" type=ClickableElement "," element=NumberLiteral ")";
		public ParserRule getRule() { return rule; }

		//"check" "(" type=ClickableElement "," element=NumberLiteral ")"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=ClickableElement
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ClickableElement
		public RuleCall getTypeClickableElementParserRuleCall_2_0() { return cTypeClickableElementParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//element=NumberLiteral
		public Assignment getElementAssignment_4() { return cElementAssignment_4; }

		//NumberLiteral
		public RuleCall getElementNumberLiteralParserRuleCall_4_0() { return cElementNumberLiteralParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameElementNumberLiteralParserRuleCall_2_0 = (RuleCall)cNameElementAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ActionType:
		//	"type" "(" nameElement=NumberLiteral "," value=Expression ")";
		public ParserRule getRule() { return rule; }

		//"type" "(" nameElement=NumberLiteral "," value=Expression ")"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//nameElement=NumberLiteral
		public Assignment getNameElementAssignment_2() { return cNameElementAssignment_2; }

		//NumberLiteral
		public RuleCall getNameElementNumberLiteralParserRuleCall_2_0() { return cNameElementNumberLiteralParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ActionSelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionSelectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementExpressionParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActionSelectExpression:
		//	"select" "(" element=Expression ")";
		public ParserRule getRule() { return rule; }

		//"select" "(" element=Expression ")"
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//element=Expression
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//Expression
		public RuleCall getElementExpressionParserRuleCall_2_0() { return cElementExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ClickableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClickableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cImageKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLinkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ClickableElement:
		//	"button" | "image" | "link";
		public ParserRule getRule() { return rule; }

		//"button" | "image" | "link"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//"image"
		public Keyword getImageKeyword_1() { return cImageKeyword_1; }

		//"link"
		public Keyword getLinkKeyword_2() { return cLinkKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final SubprocedureElements pSubprocedure;
	private final HeadElements pHead;
	private final FunctionReferenceElements pFunctionReference;
	private final FunctionNameElements pFunctionName;
	private final FunctionCallElements pFunctionCall;
	private final VariableReferenceElements pVariableReference;
	private final VariableNameElements pVariableName;
	private final NumberLiteralElements pNumberLiteral;
	private final ExpressionElements pExpression;
	private final NumLiteralExpressionElements pNumLiteralExpression;
	private final ListExpressionElements pListExpression;
	private final BooleanListExpressionElements pBooleanListExpression;
	private final BooleanListOperatorElements pBooleanListOperator;
	private final BooleanExpressionElements pBooleanExpression;
	private final VerifyActionElements pVerifyAction;
	private final ExistActionElements pExistAction;
	private final BinaryBooleanExpressionElements pBinaryBooleanExpression;
	private final NegationExpressionElements pNegationExpression;
	private final BooleanOperatorElements pBooleanOperator;
	private final InstructionElements pInstruction;
	private final DefinitionElements pDefinition;
	private final AssignationElements pAssignation;
	private final ConditionalElements pConditional;
	private final LoopElements pLoop;
	private final WhileElements pWhile;
	private final ForeachElements pForeach;
	private final ActionInstructionElements pActionInstruction;
	private final ActionClickElements pActionClick;
	private final ActionOpenElements pActionOpen;
	private final ActionCheckElements pActionCheck;
	private final ActionTypeElements pActionType;
	private final ActionSelectExpressionElements pActionSelectExpression;
	private final ClickableElementElements pClickableElement;
	private final TerminalRule tURL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SlnDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSubprocedure = new SubprocedureElements();
		this.pHead = new HeadElements();
		this.pFunctionReference = new FunctionReferenceElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pVariableName = new VariableNameElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pExpression = new ExpressionElements();
		this.pNumLiteralExpression = new NumLiteralExpressionElements();
		this.pListExpression = new ListExpressionElements();
		this.pBooleanListExpression = new BooleanListExpressionElements();
		this.pBooleanListOperator = new BooleanListOperatorElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pVerifyAction = new VerifyActionElements();
		this.pExistAction = new ExistActionElements();
		this.pBinaryBooleanExpression = new BinaryBooleanExpressionElements();
		this.pNegationExpression = new NegationExpressionElements();
		this.pBooleanOperator = new BooleanOperatorElements();
		this.pInstruction = new InstructionElements();
		this.pDefinition = new DefinitionElements();
		this.pAssignation = new AssignationElements();
		this.pConditional = new ConditionalElements();
		this.pLoop = new LoopElements();
		this.pWhile = new WhileElements();
		this.pForeach = new ForeachElements();
		this.pActionInstruction = new ActionInstructionElements();
		this.pActionClick = new ActionClickElements();
		this.pActionOpen = new ActionOpenElements();
		this.pActionCheck = new ActionCheckElements();
		this.pActionType = new ActionTypeElements();
		this.pActionSelectExpression = new ActionSelectExpressionElements();
		this.pClickableElement = new ClickableElementElements();
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.selenium.gram.xtext.SlnDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Le modele
	// * / Model:
	//	subs+=Subprocedure* "main" defs+=Definition* main+=Instruction+ "endmain";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Subprocedure:
	//	"sub" head=Head defs+=Definition* body+=Instruction+ "endsub";
	public SubprocedureElements getSubprocedureAccess() {
		return pSubprocedure;
	}
	
	public ParserRule getSubprocedureRule() {
		return getSubprocedureAccess().getRule();
	}

	//Head:
	//	name=FunctionName "()" | name=FunctionName "(" "var" argsID+=VariableName ("," "var" argsID+=VariableName)* ")";
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	/// *
	// * Subprocedure
	// * / FunctionReference:
	//	functionName=[FunctionName];
	public FunctionReferenceElements getFunctionReferenceAccess() {
		return pFunctionReference;
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}

	//FunctionName:
	//	name=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	ref=FunctionReference "()" | ref=FunctionReference "(" args+=Expression ("," args+=Expression)* ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	/// *
	// * Variables
	// * / VariableReference:
	//	varID=[VariableName];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//VariableName:
	//	name=ID;
	public VariableNameElements getVariableNameAccess() {
		return pVariableName;
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}

	//NumberLiteral:
	//	INT | STRING;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	/// *
	// * Expression
	// * / Expression:
	//	VariableReference | NumLiteralExpression | ListExpression | BooleanExpression | ActionSelectExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//NumLiteralExpression:
	//	value=NumberLiteral;
	public NumLiteralExpressionElements getNumLiteralExpressionAccess() {
		return pNumLiteralExpression;
	}
	
	public ParserRule getNumLiteralExpressionRule() {
		return getNumLiteralExpressionAccess().getRule();
	}

	//ListExpression:
	//	"sizeof" "(" exp=Expression ")";
	public ListExpressionElements getListExpressionAccess() {
		return pListExpression;
	}
	
	public ParserRule getListExpressionRule() {
		return getListExpressionAccess().getRule();
	}

	//BooleanListExpression:
	//	op=BooleanListOperator "(" "var" varName=VariableName "->" exp=Expression ")";
	public BooleanListExpressionElements getBooleanListExpressionAccess() {
		return pBooleanListExpression;
	}
	
	public ParserRule getBooleanListExpressionRule() {
		return getBooleanListExpressionAccess().getRule();
	}

	//BooleanListOperator:
	//	"All" | "Any";
	public BooleanListOperatorElements getBooleanListOperatorAccess() {
		return pBooleanListOperator;
	}
	
	public ParserRule getBooleanListOperatorRule() {
		return getBooleanListOperatorAccess().getRule();
	}

	//BooleanExpression:
	//	exp=BinaryBooleanExpression | exp=NegationExpression | exp=VerifyAction | exp=ExistAction |
	//	exp=BooleanListExpression;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//VerifyAction:
	//	"verify" "(" nameElement=NumberLiteral "," value=Expression ")";
	public VerifyActionElements getVerifyActionAccess() {
		return pVerifyAction;
	}
	
	public ParserRule getVerifyActionRule() {
		return getVerifyActionAccess().getRule();
	}

	//ExistAction:
	//	"exist" "(" nameElement=NumberLiteral ")";
	public ExistActionElements getExistActionAccess() {
		return pExistAction;
	}
	
	public ParserRule getExistActionRule() {
		return getExistActionAccess().getRule();
	}

	//BinaryBooleanExpression:
	//	op=BooleanOperator left=Expression right=Expression;
	public BinaryBooleanExpressionElements getBinaryBooleanExpressionAccess() {
		return pBinaryBooleanExpression;
	}
	
	public ParserRule getBinaryBooleanExpressionRule() {
		return getBinaryBooleanExpressionAccess().getRule();
	}

	//NegationExpression:
	//	"!" exp=Expression;
	public NegationExpressionElements getNegationExpressionAccess() {
		return pNegationExpression;
	}
	
	public ParserRule getNegationExpressionRule() {
		return getNegationExpressionAccess().getRule();
	}

	//BooleanOperator:
	//	"==" | "<" | ">";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return pBooleanOperator;
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	/// *
	// * Type of Instruction
	// * / Instruction:
	//	FunctionCall | Conditional | Loop | ActionInstruction | Assignation;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Definition:
	//	"var" varID=VariableName "=" exp=Expression;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Assignation:
	//	var=VariableReference "=" exp=Expression;
	public AssignationElements getAssignationAccess() {
		return pAssignation;
	}
	
	public ParserRule getAssignationRule() {
		return getAssignationAccess().getRule();
	}

	//Conditional:
	//	"if" exp=Expression "then" trueIns+=Instruction+ ("else" falseIns+=Instruction+)? "endif";
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	/// *
	// * Loop et Conditional
	// * / Loop:
	//	While | Foreach;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//While:
	//	"while" "(" cond=Expression ")" "do" ins+=Instruction+ "endwhile";
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//Foreach:
	//	"foreach" "(" var=VariableName "in" exp=Expression ")" "do" ins+=Instruction+ "endfor";
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}

	//ActionInstruction:
	//	action=ActionOpen | action=ActionClick | action=ActionCheck | action=ActionType;
	public ActionInstructionElements getActionInstructionAccess() {
		return pActionInstruction;
	}
	
	public ParserRule getActionInstructionRule() {
		return getActionInstructionAccess().getRule();
	}

	//ActionClick:
	//	"click" "(" type=ClickableElement "," element=NumberLiteral ")";
	public ActionClickElements getActionClickAccess() {
		return pActionClick;
	}
	
	public ParserRule getActionClickRule() {
		return getActionClickAccess().getRule();
	}

	//ActionOpen:
	//	"open" "(" url=URL ")";
	public ActionOpenElements getActionOpenAccess() {
		return pActionOpen;
	}
	
	public ParserRule getActionOpenRule() {
		return getActionOpenAccess().getRule();
	}

	//ActionCheck:
	//	"check" "(" type=ClickableElement "," element=NumberLiteral ")";
	public ActionCheckElements getActionCheckAccess() {
		return pActionCheck;
	}
	
	public ParserRule getActionCheckRule() {
		return getActionCheckAccess().getRule();
	}

	//ActionType:
	//	"type" "(" nameElement=NumberLiteral "," value=Expression ")";
	public ActionTypeElements getActionTypeAccess() {
		return pActionType;
	}
	
	public ParserRule getActionTypeRule() {
		return getActionTypeAccess().getRule();
	}

	//ActionSelectExpression:
	//	"select" "(" element=Expression ")";
	public ActionSelectExpressionElements getActionSelectExpressionAccess() {
		return pActionSelectExpression;
	}
	
	public ParserRule getActionSelectExpressionRule() {
		return getActionSelectExpressionAccess().getRule();
	}

	//ClickableElement:
	//	"button" | "image" | "link";
	public ClickableElementElements getClickableElementAccess() {
		return pClickableElement;
	}
	
	public ParserRule getClickableElementRule() {
		return getClickableElementAccess().getRule();
	}

	/// *
	// * URL
	// * / terminal URL:
	//	"a".."z"+ // Protocol
	//	"://" ("0".."9"+ "." "0".."9"+ "." "0".."9"+ "." "0".."9"+ // Hostname
	//	| ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")* ("." ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9"
	//	| "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")*)*) (":" "0".."9"+)? // Portnumber
	//	("/" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "~" | "+" | "." | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")*)* // Path
	//	("?" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")+ ("+" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" |
	//	"=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")+)*)?;
	public TerminalRule getURLRule() {
		return tURL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
