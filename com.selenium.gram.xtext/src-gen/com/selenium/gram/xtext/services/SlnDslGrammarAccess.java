/*
* generated by Xtext
*/
package com.selenium.gram.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SlnDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubsSubprocedureParserRuleCall_0_0 = (RuleCall)cSubsAssignment_0.eContents().get(0);
		private final Keyword cMainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMainInstructionParserRuleCall_2_0 = (RuleCall)cMainAssignment_2.eContents().get(0);
		private final Keyword cEndmainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * Le modele
		// * / Model:
		//	subs+=Subprocedure* "main" main+=Instruction+ "endmain";
		public ParserRule getRule() { return rule; }

		//subs+=Subprocedure* "main" main+=Instruction+ "endmain"
		public Group getGroup() { return cGroup; }

		//subs+=Subprocedure*
		public Assignment getSubsAssignment_0() { return cSubsAssignment_0; }

		//Subprocedure
		public RuleCall getSubsSubprocedureParserRuleCall_0_0() { return cSubsSubprocedureParserRuleCall_0_0; }

		//"main"
		public Keyword getMainKeyword_1() { return cMainKeyword_1; }

		//main+=Instruction+
		public Assignment getMainAssignment_2() { return cMainAssignment_2; }

		//Instruction
		public RuleCall getMainInstructionParserRuleCall_2_0() { return cMainInstructionParserRuleCall_2_0; }

		//"endmain"
		public Keyword getEndmainKeyword_3() { return cEndmainKeyword_3; }
	}

	public class SubprocedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subprocedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadHeadParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyInstructionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cEndsubKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Subprocedure:
		//	"sub" head=Head body+=Instruction+ "endsub";
		public ParserRule getRule() { return rule; }

		//"sub" head=Head body+=Instruction+ "endsub"
		public Group getGroup() { return cGroup; }

		//"sub"
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }

		//head=Head
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }

		//Head
		public RuleCall getHeadHeadParserRuleCall_1_0() { return cHeadHeadParserRuleCall_1_0; }

		//body+=Instruction+
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_2_0() { return cBodyInstructionParserRuleCall_2_0; }

		//"endsub"
		public Keyword getEndsubKeyword_3() { return cEndsubKeyword_3; }
	}

	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cVarKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVarIdAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVarIdVariableNameParserRuleCall_1_3_0 = (RuleCall)cVarIdAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cVarKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cVarIdAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cVarIdVariableNameParserRuleCall_1_4_2_0 = (RuleCall)cVarIdAssignment_1_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Head:
		//	name=FunctionName "()" | name=FunctionName "(" "var" varId=VariableName ("," "var" varId=VariableName)* ")";
		public ParserRule getRule() { return rule; }

		//name=FunctionName "()" | name=FunctionName "(" "var" varId=VariableName ("," "var" varId=VariableName)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=FunctionName "()"
		public Group getGroup_0() { return cGroup_0; }

		//name=FunctionName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_0_0_0() { return cNameFunctionNameParserRuleCall_0_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1() { return cLeftParenthesisRightParenthesisKeyword_0_1; }

		//name=FunctionName "(" "var" varId=VariableName ("," "var" varId=VariableName)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//name=FunctionName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_1_0_0() { return cNameFunctionNameParserRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"var"
		public Keyword getVarKeyword_1_2() { return cVarKeyword_1_2; }

		//varId=VariableName
		public Assignment getVarIdAssignment_1_3() { return cVarIdAssignment_1_3; }

		//VariableName
		public RuleCall getVarIdVariableNameParserRuleCall_1_3_0() { return cVarIdVariableNameParserRuleCall_1_3_0; }

		//("," "var" varId=VariableName)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//"var"
		public Keyword getVarKeyword_1_4_1() { return cVarKeyword_1_4_1; }

		//varId=VariableName
		public Assignment getVarIdAssignment_1_4_2() { return cVarIdAssignment_1_4_2; }

		//VariableName
		public RuleCall getVarIdVariableNameParserRuleCall_1_4_2_0() { return cVarIdVariableNameParserRuleCall_1_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class FunctionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionReference");
		private final Assignment cFunctionNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFunctionNameFunctionNameCrossReference_0 = (CrossReference)cFunctionNameAssignment.eContents().get(0);
		private final RuleCall cFunctionNameFunctionNameIDTerminalRuleCall_0_1 = (RuleCall)cFunctionNameFunctionNameCrossReference_0.eContents().get(1);
		
		/// *
		// * Subprocedure
		// * / FunctionReference:
		//	functionName=[FunctionName];
		public ParserRule getRule() { return rule; }

		//functionName=[FunctionName]
		public Assignment getFunctionNameAssignment() { return cFunctionNameAssignment; }

		//[FunctionName]
		public CrossReference getFunctionNameFunctionNameCrossReference_0() { return cFunctionNameFunctionNameCrossReference_0; }

		//ID
		public RuleCall getFunctionNameFunctionNameIDTerminalRuleCall_0_1() { return cFunctionNameFunctionNameIDTerminalRuleCall_0_1; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionReferenceParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionReferenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVarAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVarExpressionParserRuleCall_1_2_0 = (RuleCall)cVarAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cVarAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cVarExpressionParserRuleCall_1_3_1_0 = (RuleCall)cVarAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//FunctionCall:
		//	FunctionReference "()" | FunctionReference "(" var=Expression ("," var=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//FunctionReference "()" | FunctionReference "(" var=Expression ("," var=Expression)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionReference "()"
		public Group getGroup_0() { return cGroup_0; }

		//FunctionReference
		public RuleCall getFunctionReferenceParserRuleCall_0_0() { return cFunctionReferenceParserRuleCall_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1() { return cLeftParenthesisRightParenthesisKeyword_0_1; }

		//FunctionReference "(" var=Expression ("," var=Expression)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//FunctionReference
		public RuleCall getFunctionReferenceParserRuleCall_1_0() { return cFunctionReferenceParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//var=Expression
		public Assignment getVarAssignment_1_2() { return cVarAssignment_1_2; }

		//Expression
		public RuleCall getVarExpressionParserRuleCall_1_2_0() { return cVarExpressionParserRuleCall_1_2_0; }

		//("," var=Expression)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//var=Expression
		public Assignment getVarAssignment_1_3_1() { return cVarAssignment_1_3_1; }

		//Expression
		public RuleCall getVarExpressionParserRuleCall_1_3_1_0() { return cVarExpressionParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVarIDAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarIDVariableNameCrossReference_0 = (CrossReference)cVarIDAssignment.eContents().get(0);
		private final RuleCall cVarIDVariableNameIDTerminalRuleCall_0_1 = (RuleCall)cVarIDVariableNameCrossReference_0.eContents().get(1);
		
		/// *
		// * VAriables
		// * / VariableReference:
		//	varID=[VariableName];
		public ParserRule getRule() { return rule; }

		//varID=[VariableName]
		public Assignment getVarIDAssignment() { return cVarIDAssignment; }

		//[VariableName]
		public CrossReference getVarIDVariableNameCrossReference_0() { return cVarIDVariableNameCrossReference_0; }

		//ID
		public RuleCall getVarIDVariableNameIDTerminalRuleCall_0_1() { return cVarIDVariableNameIDTerminalRuleCall_0_1; }
	}

	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberLiteral:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableReferenceParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEqualsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVarAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVarExpressionParserRuleCall_2_2_0 = (RuleCall)cVarAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cVarAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cVarExpressionParserRuleCall_2_4_0 = (RuleCall)cVarAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		/// *
		// * Expression
		// * / Expression:
		//	var=VariableReference | NumberLiteral | "equals" "(" var=Expression "," var=Expression ")";
		public ParserRule getRule() { return rule; }

		//var=VariableReference | NumberLiteral | "equals" "(" var=Expression "," var=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//var=VariableReference
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//VariableReference
		public RuleCall getVarVariableReferenceParserRuleCall_0_0() { return cVarVariableReferenceParserRuleCall_0_0; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }

		//"equals" "(" var=Expression "," var=Expression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"equals"
		public Keyword getEqualsKeyword_2_0() { return cEqualsKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//var=Expression
		public Assignment getVarAssignment_2_2() { return cVarAssignment_2_2; }

		//Expression
		public RuleCall getVarExpressionParserRuleCall_2_2_0() { return cVarExpressionParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//var=Expression
		public Assignment getVarAssignment_2_4() { return cVarAssignment_2_4; }

		//Expression
		public RuleCall getVarExpressionParserRuleCall_2_4_0() { return cVarExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefDefinitionParserRuleCall_0_0 = (RuleCall)cDefAssignment_0.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFuncFunctionCallParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Assignment cCondAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCondConditionalParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cLoopAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cLoopLoopParserRuleCall_3_0 = (RuleCall)cLoopAssignment_3.eContents().get(0);
		private final Assignment cActAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cActActionParserRuleCall_4_0 = (RuleCall)cActAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cVarAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cVarVariableReferenceParserRuleCall_5_0_0 = (RuleCall)cVarAssignment_5_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_5_2_0 = (RuleCall)cExpAssignment_5_2.eContents().get(0);
		
		/// *
		// * Type of Instruction
		// * / Instruction:
		//	def=Definition | func=FunctionCall | cond=Conditional | loop=Loop | act=Action | var=VariableReference "="
		//	exp=Expression;
		public ParserRule getRule() { return rule; }

		//def=Definition | func=FunctionCall | cond=Conditional | loop=Loop | act=Action | var=VariableReference "="
		//exp=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//def=Definition
		public Assignment getDefAssignment_0() { return cDefAssignment_0; }

		//Definition
		public RuleCall getDefDefinitionParserRuleCall_0_0() { return cDefDefinitionParserRuleCall_0_0; }

		//func=FunctionCall
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }

		//FunctionCall
		public RuleCall getFuncFunctionCallParserRuleCall_1_0() { return cFuncFunctionCallParserRuleCall_1_0; }

		//cond=Conditional
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Conditional
		public RuleCall getCondConditionalParserRuleCall_2_0() { return cCondConditionalParserRuleCall_2_0; }

		//loop=Loop
		public Assignment getLoopAssignment_3() { return cLoopAssignment_3; }

		//Loop
		public RuleCall getLoopLoopParserRuleCall_3_0() { return cLoopLoopParserRuleCall_3_0; }

		//act=Action
		public Assignment getActAssignment_4() { return cActAssignment_4; }

		//Action
		public RuleCall getActActionParserRuleCall_4_0() { return cActActionParserRuleCall_4_0; }

		//var=VariableReference "=" exp=Expression
		public Group getGroup_5() { return cGroup_5; }

		//var=VariableReference
		public Assignment getVarAssignment_5_0() { return cVarAssignment_5_0; }

		//VariableReference
		public RuleCall getVarVariableReferenceParserRuleCall_5_0_0() { return cVarVariableReferenceParserRuleCall_5_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }

		//exp=Expression
		public Assignment getExpAssignment_5_2() { return cExpAssignment_5_2; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_5_2_0() { return cExpExpressionParserRuleCall_5_2_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDVariableNameParserRuleCall_1_0 = (RuleCall)cVarIDAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Definition:
		//	"var" varID=VariableName "=" exp=Expression;
		public ParserRule getRule() { return rule; }

		//"var" varID=VariableName "=" exp=Expression
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//varID=VariableName
		public Assignment getVarIDAssignment_1() { return cVarIDAssignment_1; }

		//VariableName
		public RuleCall getVarIDVariableNameParserRuleCall_1_0() { return cVarIDVariableNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInsInstructionParserRuleCall_3_0 = (RuleCall)cInsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInsInstructionParserRuleCall_4_1_0 = (RuleCall)cInsAssignment_4_1.eContents().get(0);
		private final Keyword cEndifKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conditional:
		//	"if" exp=Expression "then" ins+=Instruction+ ("else" ins+=Instruction+)? "endif";
		public ParserRule getRule() { return rule; }

		//"if" exp=Expression "then" ins+=Instruction+ ("else" ins+=Instruction+)? "endif"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//ins+=Instruction+
		public Assignment getInsAssignment_3() { return cInsAssignment_3; }

		//Instruction
		public RuleCall getInsInstructionParserRuleCall_3_0() { return cInsInstructionParserRuleCall_3_0; }

		//("else" ins+=Instruction+)?
		public Group getGroup_4() { return cGroup_4; }

		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//ins+=Instruction+
		public Assignment getInsAssignment_4_1() { return cInsAssignment_4_1; }

		//Instruction
		public RuleCall getInsInstructionParserRuleCall_4_1_0() { return cInsInstructionParserRuleCall_4_1_0; }

		//"endif"
		public Keyword getEndifKeyword_5() { return cEndifKeyword_5; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInsInstructionParserRuleCall_3_0 = (RuleCall)cInsAssignment_3.eContents().get(0);
		private final Keyword cEndwhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Loop:
		//	"while" exp=Expression "do" ins+=Instruction+ "endwhile";
		public ParserRule getRule() { return rule; }

		//"while" exp=Expression "do" ins+=Instruction+ "endwhile"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//ins+=Instruction+
		public Assignment getInsAssignment_3() { return cInsAssignment_3; }

		//Instruction
		public RuleCall getInsInstructionParserRuleCall_3_0() { return cInsInstructionParserRuleCall_3_0; }

		//"endwhile"
		public Keyword getEndwhileKeyword_4() { return cEndwhileKeyword_4; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//Action:
		//	"open" url=STRING;
		public ParserRule getRule() { return rule; }

		//"open" url=STRING
		public Group getGroup() { return cGroup; }

		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final SubprocedureElements pSubprocedure;
	private final HeadElements pHead;
	private final FunctionReferenceElements pFunctionReference;
	private final FunctionNameElements pFunctionName;
	private final FunctionCallElements pFunctionCall;
	private final VariableReferenceElements pVariableReference;
	private final VariableNameElements pVariableName;
	private final NumberLiteralElements pNumberLiteral;
	private final ExpressionElements pExpression;
	private final InstructionElements pInstruction;
	private final DefinitionElements pDefinition;
	private final ConditionalElements pConditional;
	private final LoopElements pLoop;
	private final ActionElements pAction;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SlnDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSubprocedure = new SubprocedureElements();
		this.pHead = new HeadElements();
		this.pFunctionReference = new FunctionReferenceElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pVariableName = new VariableNameElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pExpression = new ExpressionElements();
		this.pInstruction = new InstructionElements();
		this.pDefinition = new DefinitionElements();
		this.pConditional = new ConditionalElements();
		this.pLoop = new LoopElements();
		this.pAction = new ActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.selenium.gram.xtext.SlnDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Le modele
	// * / Model:
	//	subs+=Subprocedure* "main" main+=Instruction+ "endmain";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Subprocedure:
	//	"sub" head=Head body+=Instruction+ "endsub";
	public SubprocedureElements getSubprocedureAccess() {
		return pSubprocedure;
	}
	
	public ParserRule getSubprocedureRule() {
		return getSubprocedureAccess().getRule();
	}

	//Head:
	//	name=FunctionName "()" | name=FunctionName "(" "var" varId=VariableName ("," "var" varId=VariableName)* ")";
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	/// *
	// * Subprocedure
	// * / FunctionReference:
	//	functionName=[FunctionName];
	public FunctionReferenceElements getFunctionReferenceAccess() {
		return pFunctionReference;
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}

	//FunctionName:
	//	name=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	FunctionReference "()" | FunctionReference "(" var=Expression ("," var=Expression)* ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	/// *
	// * VAriables
	// * / VariableReference:
	//	varID=[VariableName];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//VariableName:
	//	name=ID;
	public VariableNameElements getVariableNameAccess() {
		return pVariableName;
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}

	//NumberLiteral:
	//	INT | STRING;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	/// *
	// * Expression
	// * / Expression:
	//	var=VariableReference | NumberLiteral | "equals" "(" var=Expression "," var=Expression ")";
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	/// *
	// * Type of Instruction
	// * / Instruction:
	//	def=Definition | func=FunctionCall | cond=Conditional | loop=Loop | act=Action | var=VariableReference "="
	//	exp=Expression;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Definition:
	//	"var" varID=VariableName "=" exp=Expression;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Conditional:
	//	"if" exp=Expression "then" ins+=Instruction+ ("else" ins+=Instruction+)? "endif";
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Loop:
	//	"while" exp=Expression "do" ins+=Instruction+ "endwhile";
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//Action:
	//	"open" url=STRING;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
