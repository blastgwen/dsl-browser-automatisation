/*
* generated by Xtext
*/
grammar InternalSlnDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.selenium.gram.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.selenium.gram.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.selenium.gram.xtext.services.SlnDslGrammarAccess;

}

@parser::members {
 
 	private SlnDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SlnDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubprocedure
entryRuleSubprocedure 
:
{ before(grammarAccess.getSubprocedureRule()); }
	 ruleSubprocedure
{ after(grammarAccess.getSubprocedureRule()); } 
	 EOF 
;

// Rule Subprocedure
ruleSubprocedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubprocedureAccess().getGroup()); }
(rule__Subprocedure__Group__0)
{ after(grammarAccess.getSubprocedureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHead
entryRuleHead 
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeadAccess().getAlternatives()); }
(rule__Head__Alternatives)
{ after(grammarAccess.getHeadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionReference
entryRuleFunctionReference 
:
{ before(grammarAccess.getFunctionReferenceRule()); }
	 ruleFunctionReference
{ after(grammarAccess.getFunctionReferenceRule()); } 
	 EOF 
;

// Rule FunctionReference
ruleFunctionReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionReferenceAccess().getFunctionNameAssignment()); }
(rule__FunctionReference__FunctionNameAssignment)
{ after(grammarAccess.getFunctionReferenceAccess().getFunctionNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionName
entryRuleFunctionName 
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
(rule__FunctionName__NameAssignment)
{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
(rule__FunctionCall__Alternatives)
{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getVarIDAssignment()); }
(rule__VariableReference__VarIDAssignment)
{ after(grammarAccess.getVariableReferenceAccess().getVarIDAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableName
entryRuleVariableName 
:
{ before(grammarAccess.getVariableNameRule()); }
	 ruleVariableName
{ after(grammarAccess.getVariableNameRule()); } 
	 EOF 
;

// Rule VariableName
ruleVariableName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableNameAccess().getNameAssignment()); }
(rule__VariableName__NameAssignment)
{ after(grammarAccess.getVariableNameAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getGroup()); }
(rule__Definition__Group__0)
{ after(grammarAccess.getDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditional
entryRuleConditional 
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalAccess().getGroup()); }
(rule__Conditional__Group__0)
{ after(grammarAccess.getConditionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoop
entryRuleLoop 
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopAccess().getGroup()); }
(rule__Loop__Group__0)
{ after(grammarAccess.getLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Head__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getGroup_0()); }
(rule__Head__Group_0__0)
{ after(grammarAccess.getHeadAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getHeadAccess().getGroup_1()); }
(rule__Head__Group_1__0)
{ after(grammarAccess.getHeadAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_0()); }
(rule__FunctionCall__Group_0__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1()); }
(rule__FunctionCall__Group_1__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getNumberLiteralAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarAssignment_0()); }
(rule__Expression__VarAssignment_0)
{ after(grammarAccess.getExpressionAccess().getVarAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNumberLiteralParserRuleCall_1()); }
	ruleNumberLiteral
{ after(grammarAccess.getExpressionAccess().getNumberLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getGroup_2()); }
(rule__Expression__Group_2__0)
{ after(grammarAccess.getExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getDefAssignment_0()); }
(rule__Instruction__DefAssignment_0)
{ after(grammarAccess.getInstructionAccess().getDefAssignment_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getFuncAssignment_1()); }
(rule__Instruction__FuncAssignment_1)
{ after(grammarAccess.getInstructionAccess().getFuncAssignment_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getCondAssignment_2()); }
(rule__Instruction__CondAssignment_2)
{ after(grammarAccess.getInstructionAccess().getCondAssignment_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getLoopAssignment_3()); }
(rule__Instruction__LoopAssignment_3)
{ after(grammarAccess.getInstructionAccess().getLoopAssignment_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getActAssignment_4()); }
(rule__Instruction__ActAssignment_4)
{ after(grammarAccess.getInstructionAccess().getActAssignment_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getGroup_5()); }
(rule__Instruction__Group_5__0)
{ after(grammarAccess.getInstructionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getGroup_6()); }
(rule__Instruction__Group_6__0)
{ after(grammarAccess.getInstructionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getGroup_4_0()); }
(rule__Conditional__Group_4_0__0)
{ after(grammarAccess.getConditionalAccess().getGroup_4_0()); }
)

    |(
{ before(grammarAccess.getConditionalAccess().getEndifKeyword_4_1()); }

	'endif' 

{ after(grammarAccess.getConditionalAccess().getEndifKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubsAssignment_0()); }
(rule__Model__SubsAssignment_0)*
{ after(grammarAccess.getModelAccess().getSubsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainKeyword_1()); }

	'main' 

{ after(grammarAccess.getModelAccess().getMainKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainAssignment_2()); }
(rule__Model__MainAssignment_2)
{ after(grammarAccess.getModelAccess().getMainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getEndmainKeyword_3()); }

	'endmain' 

{ after(grammarAccess.getModelAccess().getEndmainKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Subprocedure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__0__Impl
	rule__Subprocedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getSubKeyword_0()); }

	'sub' 

{ after(grammarAccess.getSubprocedureAccess().getSubKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subprocedure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__1__Impl
	rule__Subprocedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getHeadAssignment_1()); }
(rule__Subprocedure__HeadAssignment_1)
{ after(grammarAccess.getSubprocedureAccess().getHeadAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subprocedure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__2__Impl
	rule__Subprocedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getBodyAssignment_2()); }
(rule__Subprocedure__BodyAssignment_2)
{ after(grammarAccess.getSubprocedureAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subprocedure__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getEndsubKeyword_3()); }

	'endsub' 

{ after(grammarAccess.getSubprocedureAccess().getEndsubKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Head__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_0__0__Impl
	rule__Head__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameAssignment_0_0()); }
(rule__Head__NameAssignment_0_0)
{ after(grammarAccess.getHeadAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }

	'()' 

{ after(grammarAccess.getHeadAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Head__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__0__Impl
	rule__Head__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameAssignment_1_0()); }
(rule__Head__NameAssignment_1_0)
{ after(grammarAccess.getHeadAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__1__Impl
	rule__Head__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getHeadAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__2__Impl
	rule__Head__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarKeyword_1_2()); }

	'var' 

{ after(grammarAccess.getHeadAccess().getVarKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__3__Impl
	rule__Head__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarIdAssignment_1_3()); }
(rule__Head__VarIdAssignment_1_3)
{ after(grammarAccess.getHeadAccess().getVarIdAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__4__Impl
	rule__Head__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getGroup_1_4()); }
(rule__Head__Group_1_4__0)*
{ after(grammarAccess.getHeadAccess().getGroup_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getRightParenthesisKeyword_1_5()); }

	')' 

{ after(grammarAccess.getHeadAccess().getRightParenthesisKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Head__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1_4__0__Impl
	rule__Head__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getCommaKeyword_1_4_0()); }

	',' 

{ after(grammarAccess.getHeadAccess().getCommaKeyword_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1_4__1__Impl
	rule__Head__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarKeyword_1_4_1()); }

	'var' 

{ after(grammarAccess.getHeadAccess().getVarKeyword_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarIdAssignment_1_4_2()); }
(rule__Head__VarIdAssignment_1_4_2)
{ after(grammarAccess.getHeadAccess().getVarIdAssignment_1_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_0__0__Impl
	rule__FunctionCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionReferenceParserRuleCall_0_0()); }
	ruleFunctionReference
{ after(grammarAccess.getFunctionCallAccess().getFunctionReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }

	'()' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__0__Impl
	rule__FunctionCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionReferenceParserRuleCall_1_0()); }
	ruleFunctionReference
{ after(grammarAccess.getFunctionCallAccess().getFunctionReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__1__Impl
	rule__FunctionCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__2__Impl
	rule__FunctionCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getVarAssignment_1_2()); }
(rule__FunctionCall__VarAssignment_1_2)
{ after(grammarAccess.getFunctionCallAccess().getVarAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__3__Impl
	rule__FunctionCall__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1_3()); }
(rule__FunctionCall__Group_1_3__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_3__0__Impl
	rule__FunctionCall__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_3_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getVarAssignment_1_3_1()); }
(rule__FunctionCall__VarAssignment_1_3_1)
{ after(grammarAccess.getFunctionCallAccess().getVarAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__0__Impl
	rule__Expression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getEqualsKeyword_2_0()); }

	'equals(' 

{ after(grammarAccess.getExpressionAccess().getEqualsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__1__Impl
	rule__Expression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarAssignment_2_1()); }
(rule__Expression__VarAssignment_2_1)
{ after(grammarAccess.getExpressionAccess().getVarAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__2__Impl
	rule__Expression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCommaKeyword_2_2()); }

	',' 

{ after(grammarAccess.getExpressionAccess().getCommaKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__3__Impl
	rule__Expression__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarAssignment_2_3()); }
(rule__Expression__VarAssignment_2_3)
{ after(grammarAccess.getExpressionAccess().getVarAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_2_4()); }

	')' 

{ after(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Instruction__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group_5__0__Impl
	rule__Instruction__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getVarAssignment_5_0()); }
(rule__Instruction__VarAssignment_5_0)
{ after(grammarAccess.getInstructionAccess().getVarAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group_5__1__Impl
	rule__Instruction__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getEqualsSignKeyword_5_1()); }

	'=' 

{ after(grammarAccess.getInstructionAccess().getEqualsSignKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getExpAssignment_5_2()); }
(rule__Instruction__ExpAssignment_5_2)
{ after(grammarAccess.getInstructionAccess().getExpAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Instruction__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group_6__0__Impl
	rule__Instruction__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_6_0()); }

	'{' 

{ after(grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group_6__1__Impl
	rule__Instruction__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getInstructionAccess().getInsAssignment_6_1()); }
(rule__Instruction__InsAssignment_6_1)
{ after(grammarAccess.getInstructionAccess().getInsAssignment_6_1()); }
)
(
{ before(grammarAccess.getInstructionAccess().getInsAssignment_6_1()); }
(rule__Instruction__InsAssignment_6_1)*
{ after(grammarAccess.getInstructionAccess().getInsAssignment_6_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_6_2()); }

	'}' 

{ after(grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Definition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getDefinitionAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getVarIDAssignment_1()); }
(rule__Definition__VarIDAssignment_1)
{ after(grammarAccess.getDefinitionAccess().getVarIDAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getExpAssignment_3()); }
(rule__Definition__ExpAssignment_3)
{ after(grammarAccess.getDefinitionAccess().getExpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Conditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionalAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getExpAssignment_1()); }
(rule__Conditional__ExpAssignment_1)
{ after(grammarAccess.getConditionalAccess().getExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getConditionalAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getInsAssignment_3()); }
(rule__Conditional__InsAssignment_3)
{ after(grammarAccess.getConditionalAccess().getInsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getAlternatives_4()); }
(rule__Conditional__Alternatives_4)
{ after(grammarAccess.getConditionalAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Conditional__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_4_0__0__Impl
	rule__Conditional__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getElseKeyword_4_0_0()); }

	'else' 

{ after(grammarAccess.getConditionalAccess().getElseKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_4_0__1__Impl
	rule__Conditional__Group_4_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getInsAssignment_4_0_1()); }
(rule__Conditional__InsAssignment_4_0_1)
{ after(grammarAccess.getConditionalAccess().getInsAssignment_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_4_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_4_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getEndifKeyword_4_0_2()); }

	'endif' 

{ after(grammarAccess.getConditionalAccess().getEndifKeyword_4_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Loop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getLoopAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getExpAssignment_1()); }
(rule__Loop__ExpAssignment_1)
{ after(grammarAccess.getLoopAccess().getExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getDoKeyword_2()); }

	'do' 

{ after(grammarAccess.getLoopAccess().getDoKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getInsAssignment_3()); }
(rule__Loop__InsAssignment_3)
{ after(grammarAccess.getLoopAccess().getInsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getEndwhileKeyword_4()); }

	'endwhile' 

{ after(grammarAccess.getLoopAccess().getEndwhileKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getOpenKeyword_0()); }

	'open' 

{ after(grammarAccess.getActionAccess().getOpenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getUrlAssignment_1()); }
(rule__Action__UrlAssignment_1)
{ after(grammarAccess.getActionAccess().getUrlAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__SubsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubsSubprocedureParserRuleCall_0_0()); }
	ruleSubprocedure{ after(grammarAccess.getModelAccess().getSubsSubprocedureParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__MainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getModelAccess().getMainInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__HeadAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getHeadHeadParserRuleCall_1_0()); }
	ruleHead{ after(grammarAccess.getSubprocedureAccess().getHeadHeadParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getBodyInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getSubprocedureAccess().getBodyInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_0_0_0()); }
	ruleFunctionName{ after(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_1_0_0()); }
	ruleFunctionName{ after(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__VarIdAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarIdVariableNameParserRuleCall_1_3_0()); }
	ruleVariableName{ after(grammarAccess.getHeadAccess().getVarIdVariableNameParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__VarIdAssignment_1_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarIdVariableNameParserRuleCall_1_4_2_0()); }
	ruleVariableName{ after(grammarAccess.getHeadAccess().getVarIdVariableNameParserRuleCall_1_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReference__FunctionNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameCrossReference_0()); }
(
{ before(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__VarAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getVarExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getVarExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__VarAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getVarExpressionParserRuleCall_1_3_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getVarExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VarIDAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameCrossReference_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableNameAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableNameAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getExpressionAccess().getVarVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__VarAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionAccess().getVarExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__VarAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarExpressionParserRuleCall_2_3_0()); }
	ruleExpression{ after(grammarAccess.getExpressionAccess().getVarExpressionParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__DefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getDefDefinitionParserRuleCall_0_0()); }
	ruleDefinition{ after(grammarAccess.getInstructionAccess().getDefDefinitionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__FuncAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getFuncFunctionCallParserRuleCall_1_0()); }
	ruleFunctionCall{ after(grammarAccess.getInstructionAccess().getFuncFunctionCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__CondAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getCondConditionalParserRuleCall_2_0()); }
	ruleConditional{ after(grammarAccess.getInstructionAccess().getCondConditionalParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__LoopAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getLoopLoopParserRuleCall_3_0()); }
	ruleLoop{ after(grammarAccess.getInstructionAccess().getLoopLoopParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__ActAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getActActionParserRuleCall_4_0()); }
	ruleAction{ after(grammarAccess.getInstructionAccess().getActActionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__VarAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getVarVariableReferenceParserRuleCall_5_0_0()); }
	ruleVariableReference{ after(grammarAccess.getInstructionAccess().getVarVariableReferenceParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__ExpAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getExpExpressionParserRuleCall_5_2_0()); }
	ruleExpression{ after(grammarAccess.getInstructionAccess().getExpExpressionParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__InsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getInsInstructionParserRuleCall_6_1_0()); }
	ruleInstruction{ after(grammarAccess.getInstructionAccess().getInsInstructionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__VarIDAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getVarIDVariableNameParserRuleCall_1_0()); }
	ruleVariableName{ after(grammarAccess.getDefinitionAccess().getVarIDVariableNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getExpExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getDefinitionAccess().getExpExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getExpExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getConditionalAccess().getExpExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__InsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getInsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getConditionalAccess().getInsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__InsAssignment_4_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getInsInstructionParserRuleCall_4_0_1_0()); }
	ruleInstruction{ after(grammarAccess.getConditionalAccess().getInsInstructionParserRuleCall_4_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getExpExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getLoopAccess().getExpExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__InsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getInsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getLoopAccess().getInsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__UrlAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getActionAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


