/*
* generated by Xtext
*/
grammar InternalSlnDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.selenium.gram.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.selenium.gram.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.selenium.gram.xtext.services.SlnDslGrammarAccess;

}

@parser::members {
 
 	private SlnDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SlnDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectBrowser
entryRuleSelectBrowser 
:
{ before(grammarAccess.getSelectBrowserRule()); }
	 ruleSelectBrowser
{ after(grammarAccess.getSelectBrowserRule()); } 
	 EOF 
;

// Rule SelectBrowser
ruleSelectBrowser
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectBrowserAccess().getGroup()); }
(rule__SelectBrowser__Group__0)
{ after(grammarAccess.getSelectBrowserAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBROWSER
entryRuleBROWSER 
:
{ before(grammarAccess.getBROWSERRule()); }
	 ruleBROWSER
{ after(grammarAccess.getBROWSERRule()); } 
	 EOF 
;

// Rule BROWSER
ruleBROWSER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBROWSERAccess().getAlternatives()); }
(rule__BROWSER__Alternatives)
{ after(grammarAccess.getBROWSERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubprocedure
entryRuleSubprocedure 
:
{ before(grammarAccess.getSubprocedureRule()); }
	 ruleSubprocedure
{ after(grammarAccess.getSubprocedureRule()); } 
	 EOF 
;

// Rule Subprocedure
ruleSubprocedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubprocedureAccess().getGroup()); }
(rule__Subprocedure__Group__0)
{ after(grammarAccess.getSubprocedureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBody
entryRuleBody 
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getGroup()); }
(rule__Body__Group__0)
{ after(grammarAccess.getBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHead
entryRuleHead 
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeadAccess().getAlternatives()); }
(rule__Head__Alternatives)
{ after(grammarAccess.getHeadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionReference
entryRuleFunctionReference 
:
{ before(grammarAccess.getFunctionReferenceRule()); }
	 ruleFunctionReference
{ after(grammarAccess.getFunctionReferenceRule()); } 
	 EOF 
;

// Rule FunctionReference
ruleFunctionReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionReferenceAccess().getFunctionNameAssignment()); }
(rule__FunctionReference__FunctionNameAssignment)
{ after(grammarAccess.getFunctionReferenceAccess().getFunctionNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionName
entryRuleFunctionName 
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
(rule__FunctionName__NameAssignment)
{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
(rule__FunctionCall__Alternatives)
{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getVarIDAssignment()); }
(rule__VariableReference__VarIDAssignment)
{ after(grammarAccess.getVariableReferenceAccess().getVarIDAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableName
entryRuleVariableName 
:
{ before(grammarAccess.getVariableNameRule()); }
	 ruleVariableName
{ after(grammarAccess.getVariableNameRule()); } 
	 EOF 
;

// Rule VariableName
ruleVariableName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableNameAccess().getNameAssignment()); }
(rule__VariableName__NameAssignment)
{ after(grammarAccess.getVariableNameAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUri
entryRuleUri 
:
{ before(grammarAccess.getUriRule()); }
	 ruleUri
{ after(grammarAccess.getUriRule()); } 
	 EOF 
;

// Rule Uri
ruleUri
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUriAccess().getUrlAssignment()); }
(rule__Uri__UrlAssignment)
{ after(grammarAccess.getUriAccess().getUrlAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumLiteralExpression
entryRuleNumLiteralExpression 
:
{ before(grammarAccess.getNumLiteralExpressionRule()); }
	 ruleNumLiteralExpression
{ after(grammarAccess.getNumLiteralExpressionRule()); } 
	 EOF 
;

// Rule NumLiteralExpression
ruleNumLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumLiteralExpressionAccess().getValueAssignment()); }
(rule__NumLiteralExpression__ValueAssignment)
{ after(grammarAccess.getNumLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListExpression
entryRuleListExpression 
:
{ before(grammarAccess.getListExpressionRule()); }
	 ruleListExpression
{ after(grammarAccess.getListExpressionRule()); } 
	 EOF 
;

// Rule ListExpression
ruleListExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListExpressionAccess().getGroup()); }
(rule__ListExpression__Group__0)
{ after(grammarAccess.getListExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanListExpression
entryRuleBooleanListExpression 
:
{ before(grammarAccess.getBooleanListExpressionRule()); }
	 ruleBooleanListExpression
{ after(grammarAccess.getBooleanListExpressionRule()); } 
	 EOF 
;

// Rule BooleanListExpression
ruleBooleanListExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getGroup()); }
(rule__BooleanListExpression__Group__0)
{ after(grammarAccess.getBooleanListExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanListOperator
entryRuleBooleanListOperator 
:
{ before(grammarAccess.getBooleanListOperatorRule()); }
	 ruleBooleanListOperator
{ after(grammarAccess.getBooleanListOperatorRule()); } 
	 EOF 
;

// Rule BooleanListOperator
ruleBooleanListOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanListOperatorAccess().getAlternatives()); }
(rule__BooleanListOperator__Alternatives)
{ after(grammarAccess.getBooleanListOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
(rule__BooleanExpression__Alternatives)
{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerifyAction
entryRuleVerifyAction 
:
{ before(grammarAccess.getVerifyActionRule()); }
	 ruleVerifyAction
{ after(grammarAccess.getVerifyActionRule()); } 
	 EOF 
;

// Rule VerifyAction
ruleVerifyAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVerifyActionAccess().getGroup()); }
(rule__VerifyAction__Group__0)
{ after(grammarAccess.getVerifyActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistAction
entryRuleExistAction 
:
{ before(grammarAccess.getExistActionRule()); }
	 ruleExistAction
{ after(grammarAccess.getExistActionRule()); } 
	 EOF 
;

// Rule ExistAction
ruleExistAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistActionAccess().getGroup()); }
(rule__ExistAction__Group__0)
{ after(grammarAccess.getExistActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectAction
entryRuleSelectAction 
:
{ before(grammarAccess.getSelectActionRule()); }
	 ruleSelectAction
{ after(grammarAccess.getSelectActionRule()); } 
	 EOF 
;

// Rule SelectAction
ruleSelectAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectActionAccess().getGroup()); }
(rule__SelectAction__Group__0)
{ after(grammarAccess.getSelectActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryBooleanExpression
entryRuleBinaryBooleanExpression 
:
{ before(grammarAccess.getBinaryBooleanExpressionRule()); }
	 ruleBinaryBooleanExpression
{ after(grammarAccess.getBinaryBooleanExpressionRule()); } 
	 EOF 
;

// Rule BinaryBooleanExpression
ruleBinaryBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getGroup()); }
(rule__BinaryBooleanExpression__Group__0)
{ after(grammarAccess.getBinaryBooleanExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryLogicalExpression
entryRuleBinaryLogicalExpression 
:
{ before(grammarAccess.getBinaryLogicalExpressionRule()); }
	 ruleBinaryLogicalExpression
{ after(grammarAccess.getBinaryLogicalExpressionRule()); } 
	 EOF 
;

// Rule BinaryLogicalExpression
ruleBinaryLogicalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getGroup()); }
(rule__BinaryLogicalExpression__Group__0)
{ after(grammarAccess.getBinaryLogicalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegationExpression
entryRuleNegationExpression 
:
{ before(grammarAccess.getNegationExpressionRule()); }
	 ruleNegationExpression
{ after(grammarAccess.getNegationExpressionRule()); } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationExpressionAccess().getGroup()); }
(rule__NegationExpression__Group__0)
{ after(grammarAccess.getNegationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator 
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
(rule__LogicalOperator__Alternatives)
{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator 
:
{ before(grammarAccess.getBooleanOperatorRule()); }
	 ruleBooleanOperator
{ after(grammarAccess.getBooleanOperatorRule()); } 
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
(rule__BooleanOperator__Alternatives)
{ after(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getGroup()); }
(rule__Definition__Group__0)
{ after(grammarAccess.getDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignation
entryRuleAssignation 
:
{ before(grammarAccess.getAssignationRule()); }
	 ruleAssignation
{ after(grammarAccess.getAssignationRule()); } 
	 EOF 
;

// Rule Assignation
ruleAssignation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignationAccess().getGroup()); }
(rule__Assignation__Group__0)
{ after(grammarAccess.getAssignationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditional
entryRuleConditional 
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalAccess().getGroup()); }
(rule__Conditional__Group__0)
{ after(grammarAccess.getConditionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoop
entryRuleLoop 
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopAccess().getAlternatives()); }
(rule__Loop__Alternatives)
{ after(grammarAccess.getLoopAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForeach
entryRuleForeach 
:
{ before(grammarAccess.getForeachRule()); }
	 ruleForeach
{ after(grammarAccess.getForeachRule()); } 
	 EOF 
;

// Rule Foreach
ruleForeach
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForeachAccess().getGroup()); }
(rule__Foreach__Group__0)
{ after(grammarAccess.getForeachAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionInstruction
entryRuleActionInstruction 
:
{ before(grammarAccess.getActionInstructionRule()); }
	 ruleActionInstruction
{ after(grammarAccess.getActionInstructionRule()); } 
	 EOF 
;

// Rule ActionInstruction
ruleActionInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionInstructionAccess().getAlternatives()); }
(rule__ActionInstruction__Alternatives)
{ after(grammarAccess.getActionInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionClick
entryRuleActionClick 
:
{ before(grammarAccess.getActionClickRule()); }
	 ruleActionClick
{ after(grammarAccess.getActionClickRule()); } 
	 EOF 
;

// Rule ActionClick
ruleActionClick
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionClickAccess().getGroup()); }
(rule__ActionClick__Group__0)
{ after(grammarAccess.getActionClickAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionOpen
entryRuleActionOpen 
:
{ before(grammarAccess.getActionOpenRule()); }
	 ruleActionOpen
{ after(grammarAccess.getActionOpenRule()); } 
	 EOF 
;

// Rule ActionOpen
ruleActionOpen
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionOpenAccess().getGroup()); }
(rule__ActionOpen__Group__0)
{ after(grammarAccess.getActionOpenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionCheck
entryRuleActionCheck 
:
{ before(grammarAccess.getActionCheckRule()); }
	 ruleActionCheck
{ after(grammarAccess.getActionCheckRule()); } 
	 EOF 
;

// Rule ActionCheck
ruleActionCheck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionCheckAccess().getGroup()); }
(rule__ActionCheck__Group__0)
{ after(grammarAccess.getActionCheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionType
entryRuleActionType 
:
{ before(grammarAccess.getActionTypeRule()); }
	 ruleActionType
{ after(grammarAccess.getActionTypeRule()); } 
	 EOF 
;

// Rule ActionType
ruleActionType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionTypeAccess().getGroup()); }
(rule__ActionType__Group__0)
{ after(grammarAccess.getActionTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectableElement
entryRuleSelectableElement 
:
{ before(grammarAccess.getSelectableElementRule()); }
	 ruleSelectableElement
{ after(grammarAccess.getSelectableElementRule()); } 
	 EOF 
;

// Rule SelectableElement
ruleSelectableElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectableElementAccess().getAlternatives()); }
(rule__SelectableElement__Alternatives)
{ after(grammarAccess.getSelectableElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClickableElement
entryRuleClickableElement 
:
{ before(grammarAccess.getClickableElementRule()); }
	 ruleClickableElement
{ after(grammarAccess.getClickableElementRule()); } 
	 EOF 
;

// Rule ClickableElement
ruleClickableElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClickableElementAccess().getAlternatives()); }
(rule__ClickableElement__Alternatives)
{ after(grammarAccess.getClickableElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerifiableElement
entryRuleVerifiableElement 
:
{ before(grammarAccess.getVerifiableElementRule()); }
	 ruleVerifiableElement
{ after(grammarAccess.getVerifiableElementRule()); } 
	 EOF 
;

// Rule VerifiableElement
ruleVerifiableElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVerifiableElementAccess().getAlternatives()); }
(rule__VerifiableElement__Alternatives)
{ after(grammarAccess.getVerifiableElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BROWSER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBROWSERAccess().getFirefoxKeyword_0()); }

	'firefox' 

{ after(grammarAccess.getBROWSERAccess().getFirefoxKeyword_0()); }
)

    |(
{ before(grammarAccess.getBROWSERAccess().getChromeKeyword_1()); }

	'chrome' 

{ after(grammarAccess.getBROWSERAccess().getChromeKeyword_1()); }
)

    |(
{ before(grammarAccess.getBROWSERAccess().getOperaKeyword_2()); }

	'opera' 

{ after(grammarAccess.getBROWSERAccess().getOperaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getGroup_0()); }
(rule__Head__Group_0__0)
{ after(grammarAccess.getHeadAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getHeadAccess().getGroup_1()); }
(rule__Head__Group_1__0)
{ after(grammarAccess.getHeadAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_0()); }
(rule__FunctionCall__Group_0__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1()); }
(rule__FunctionCall__Group_1__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getNumberLiteralAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
{ after(grammarAccess.getExpressionAccess().getVariableReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNumLiteralExpressionParserRuleCall_1()); }
	ruleNumLiteralExpression
{ after(grammarAccess.getExpressionAccess().getNumLiteralExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getListExpressionParserRuleCall_2()); }
	ruleListExpression
{ after(grammarAccess.getExpressionAccess().getListExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_3()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSelectActionParserRuleCall_4()); }
	ruleSelectAction
{ after(grammarAccess.getExpressionAccess().getSelectActionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getUriParserRuleCall_5()); }
	ruleUri
{ after(grammarAccess.getExpressionAccess().getUriParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListOperatorAccess().getAllKeyword_0()); }

	'All' 

{ after(grammarAccess.getBooleanListOperatorAccess().getAllKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanListOperatorAccess().getAnyKeyword_1()); }

	'Any' 

{ after(grammarAccess.getBooleanListOperatorAccess().getAnyKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_0()); }
(rule__BooleanExpression__ExpAssignment_0)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_1()); }
(rule__BooleanExpression__ExpAssignment_1)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_1()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_2()); }
(rule__BooleanExpression__ExpAssignment_2)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_2()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_3()); }
(rule__BooleanExpression__ExpAssignment_3)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_3()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_4()); }
(rule__BooleanExpression__ExpAssignment_4)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_4()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_5()); }
(rule__BooleanExpression__ExpAssignment_5)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_5()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_6()); }
(rule__BooleanExpression__ExpAssignment_6)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_6()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getExpAssignment_7()); }
(rule__BooleanExpression__ExpAssignment_7)
{ after(grammarAccess.getBooleanExpressionAccess().getExpAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAmpersandAmpersandKeyword_0()); }

	'&&' 

{ after(grammarAccess.getLogicalOperatorAccess().getAmpersandAmpersandKeyword_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }

	'||' 

{ after(grammarAccess.getLogicalOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getBooleanOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getBooleanOperatorAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getBooleanOperatorAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getFunctionCallParserRuleCall_0()); }
	ruleFunctionCall
{ after(grammarAccess.getInstructionAccess().getFunctionCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getConditionalParserRuleCall_1()); }
	ruleConditional
{ after(grammarAccess.getInstructionAccess().getConditionalParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getLoopParserRuleCall_2()); }
	ruleLoop
{ after(grammarAccess.getInstructionAccess().getLoopParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getActionInstructionParserRuleCall_3()); }
	ruleActionInstruction
{ after(grammarAccess.getInstructionAccess().getActionInstructionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAssignationParserRuleCall_4()); }
	ruleAssignation
{ after(grammarAccess.getInstructionAccess().getAssignationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getWhileParserRuleCall_0()); }
	ruleWhile
{ after(grammarAccess.getLoopAccess().getWhileParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLoopAccess().getForeachParserRuleCall_1()); }
	ruleForeach
{ after(grammarAccess.getLoopAccess().getForeachParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionInstruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionInstructionAccess().getActionAssignment_0()); }
(rule__ActionInstruction__ActionAssignment_0)
{ after(grammarAccess.getActionInstructionAccess().getActionAssignment_0()); }
)

    |(
{ before(grammarAccess.getActionInstructionAccess().getActionAssignment_1()); }
(rule__ActionInstruction__ActionAssignment_1)
{ after(grammarAccess.getActionInstructionAccess().getActionAssignment_1()); }
)

    |(
{ before(grammarAccess.getActionInstructionAccess().getActionAssignment_2()); }
(rule__ActionInstruction__ActionAssignment_2)
{ after(grammarAccess.getActionInstructionAccess().getActionAssignment_2()); }
)

    |(
{ before(grammarAccess.getActionInstructionAccess().getActionAssignment_3()); }
(rule__ActionInstruction__ActionAssignment_3)
{ after(grammarAccess.getActionInstructionAccess().getActionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectableElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectableElementAccess().getClickableElementParserRuleCall_0()); }
	ruleClickableElement
{ after(grammarAccess.getSelectableElementAccess().getClickableElementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSelectableElementAccess().getVerifiableElementParserRuleCall_1()); }
	ruleVerifiableElement
{ after(grammarAccess.getSelectableElementAccess().getVerifiableElementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClickableElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickableElementAccess().getButtonKeyword_0()); }

	'button' 

{ after(grammarAccess.getClickableElementAccess().getButtonKeyword_0()); }
)

    |(
{ before(grammarAccess.getClickableElementAccess().getImageKeyword_1()); }

	'image' 

{ after(grammarAccess.getClickableElementAccess().getImageKeyword_1()); }
)

    |(
{ before(grammarAccess.getClickableElementAccess().getLinkKeyword_2()); }

	'link' 

{ after(grammarAccess.getClickableElementAccess().getLinkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerifiableElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifiableElementAccess().getCheckboxKeyword_0()); }

	'checkbox' 

{ after(grammarAccess.getVerifiableElementAccess().getCheckboxKeyword_0()); }
)

    |(
{ before(grammarAccess.getVerifiableElementAccess().getTextboxKeyword_1()); }

	'textbox' 

{ after(grammarAccess.getVerifiableElementAccess().getTextboxKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNavigatorAssignment_0()); }
(rule__Model__NavigatorAssignment_0)
{ after(grammarAccess.getModelAccess().getNavigatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubsAssignment_1()); }
(rule__Model__SubsAssignment_1)*
{ after(grammarAccess.getModelAccess().getSubsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainKeyword_2()); }

	'main' 

{ after(grammarAccess.getModelAccess().getMainKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getBodyAssignment_3()); }
(rule__Model__BodyAssignment_3)
{ after(grammarAccess.getModelAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getEndmainKeyword_4()); }

	'endmain' 

{ after(grammarAccess.getModelAccess().getEndmainKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SelectBrowser__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectBrowser__Group__0__Impl
	rule__SelectBrowser__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectBrowser__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectBrowserAccess().getBrowserKeyword_0()); }

	'browser' 

{ after(grammarAccess.getSelectBrowserAccess().getBrowserKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectBrowser__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectBrowser__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectBrowser__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectBrowserAccess().getBrowserAssignment_1()); }
(rule__SelectBrowser__BrowserAssignment_1)
{ after(grammarAccess.getSelectBrowserAccess().getBrowserAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subprocedure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__0__Impl
	rule__Subprocedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getSubKeyword_0()); }

	'sub' 

{ after(grammarAccess.getSubprocedureAccess().getSubKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subprocedure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__1__Impl
	rule__Subprocedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getHeadAssignment_1()); }
(rule__Subprocedure__HeadAssignment_1)
{ after(grammarAccess.getSubprocedureAccess().getHeadAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subprocedure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__2__Impl
	rule__Subprocedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getBodyAssignment_2()); }
(rule__Subprocedure__BodyAssignment_2)
{ after(grammarAccess.getSubprocedureAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subprocedure__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subprocedure__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getEndsubKeyword_3()); }

	'endsub' 

{ after(grammarAccess.getSubprocedureAccess().getEndsubKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Body__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getDefsAssignment_0()); }
(rule__Body__DefsAssignment_0)*
{ after(grammarAccess.getBodyAccess().getDefsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBodyAccess().getInstructionsAssignment_1()); }
(rule__Body__InstructionsAssignment_1)
{ after(grammarAccess.getBodyAccess().getInstructionsAssignment_1()); }
)
(
{ before(grammarAccess.getBodyAccess().getInstructionsAssignment_1()); }
(rule__Body__InstructionsAssignment_1)*
{ after(grammarAccess.getBodyAccess().getInstructionsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Head__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_0__0__Impl
	rule__Head__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameAssignment_0_0()); }
(rule__Head__NameAssignment_0_0)
{ after(grammarAccess.getHeadAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }

	'()' 

{ after(grammarAccess.getHeadAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Head__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__0__Impl
	rule__Head__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameAssignment_1_0()); }
(rule__Head__NameAssignment_1_0)
{ after(grammarAccess.getHeadAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__1__Impl
	rule__Head__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getHeadAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__2__Impl
	rule__Head__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarKeyword_1_2()); }

	'var' 

{ after(grammarAccess.getHeadAccess().getVarKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__3__Impl
	rule__Head__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getArgsIDAssignment_1_3()); }
(rule__Head__ArgsIDAssignment_1_3)
{ after(grammarAccess.getHeadAccess().getArgsIDAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__4__Impl
	rule__Head__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getGroup_1_4()); }
(rule__Head__Group_1_4__0)*
{ after(grammarAccess.getHeadAccess().getGroup_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getRightParenthesisKeyword_1_5()); }

	')' 

{ after(grammarAccess.getHeadAccess().getRightParenthesisKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Head__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1_4__0__Impl
	rule__Head__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getCommaKeyword_1_4_0()); }

	',' 

{ after(grammarAccess.getHeadAccess().getCommaKeyword_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1_4__1__Impl
	rule__Head__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getVarKeyword_1_4_1()); }

	'var' 

{ after(grammarAccess.getHeadAccess().getVarKeyword_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group_1_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Head__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group_1_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getArgsIDAssignment_1_4_2()); }
(rule__Head__ArgsIDAssignment_1_4_2)
{ after(grammarAccess.getHeadAccess().getArgsIDAssignment_1_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_0__0__Impl
	rule__FunctionCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRefAssignment_0_0()); }
(rule__FunctionCall__RefAssignment_0_0)
{ after(grammarAccess.getFunctionCallAccess().getRefAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }

	'()' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__0__Impl
	rule__FunctionCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRefAssignment_1_0()); }
(rule__FunctionCall__RefAssignment_1_0)
{ after(grammarAccess.getFunctionCallAccess().getRefAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__1__Impl
	rule__FunctionCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__2__Impl
	rule__FunctionCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_1_2()); }
(rule__FunctionCall__ArgsAssignment_1_2)
{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__3__Impl
	rule__FunctionCall__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1_3()); }
(rule__FunctionCall__Group_1_3__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_3__0__Impl
	rule__FunctionCall__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_3_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_1_3_1()); }
(rule__FunctionCall__ArgsAssignment_1_3_1)
{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListExpression__Group__0__Impl
	rule__ListExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListExpressionAccess().getSizeofKeyword_0()); }

	'sizeof' 

{ after(grammarAccess.getListExpressionAccess().getSizeofKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListExpression__Group__1__Impl
	rule__ListExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getListExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListExpression__Group__2__Impl
	rule__ListExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListExpressionAccess().getExpAssignment_2()); }
(rule__ListExpression__ExpAssignment_2)
{ after(grammarAccess.getListExpressionAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getListExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BooleanListExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__0__Impl
	rule__BooleanListExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getOpAssignment_0()); }
(rule__BooleanListExpression__OpAssignment_0)
{ after(grammarAccess.getBooleanListExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanListExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__1__Impl
	rule__BooleanListExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getBooleanListExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanListExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__2__Impl
	rule__BooleanListExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getVarKeyword_2()); }

	'var' 

{ after(grammarAccess.getBooleanListExpressionAccess().getVarKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanListExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__3__Impl
	rule__BooleanListExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getVarNameAssignment_3()); }
(rule__BooleanListExpression__VarNameAssignment_3)
{ after(grammarAccess.getBooleanListExpressionAccess().getVarNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanListExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__4__Impl
	rule__BooleanListExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getHyphenMinusGreaterThanSignKeyword_4()); }

	'->' 

{ after(grammarAccess.getBooleanListExpressionAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanListExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__5__Impl
	rule__BooleanListExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getExpAssignment_5()); }
(rule__BooleanListExpression__ExpAssignment_5)
{ after(grammarAccess.getBooleanListExpressionAccess().getExpAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanListExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanListExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getBooleanListExpressionAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__VerifyAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__0__Impl
	rule__VerifyAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getVerifyKeyword_0()); }

	'verify' 

{ after(grammarAccess.getVerifyActionAccess().getVerifyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__1__Impl
	rule__VerifyAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getVerifyActionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__2__Impl
	rule__VerifyAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getVerifyTypeAssignment_2()); }
(rule__VerifyAction__VerifyTypeAssignment_2)
{ after(grammarAccess.getVerifyActionAccess().getVerifyTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__3__Impl
	rule__VerifyAction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getVerifyActionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__4__Impl
	rule__VerifyAction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getNameElementAssignment_4()); }
(rule__VerifyAction__NameElementAssignment_4)
{ after(grammarAccess.getVerifyActionAccess().getNameElementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__5__Impl
	rule__VerifyAction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getVerifyActionAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__6__Impl
	rule__VerifyAction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getValueAssignment_6()); }
(rule__VerifyAction__ValueAssignment_6)
{ after(grammarAccess.getVerifyActionAccess().getValueAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerifyAction__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerifyAction__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getVerifyActionAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ExistAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistAction__Group__0__Impl
	rule__ExistAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getExistKeyword_0()); }

	'exist' 

{ after(grammarAccess.getExistActionAccess().getExistKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistAction__Group__1__Impl
	rule__ExistAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getExistActionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistAction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistAction__Group__2__Impl
	rule__ExistAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getSelectAssignment_2()); }
(rule__ExistAction__SelectAssignment_2)
{ after(grammarAccess.getExistActionAccess().getSelectAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistAction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistAction__Group__3__Impl
	rule__ExistAction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getExistActionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistAction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistAction__Group__4__Impl
	rule__ExistAction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getNameElementAssignment_4()); }
(rule__ExistAction__NameElementAssignment_4)
{ after(grammarAccess.getExistActionAccess().getNameElementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistAction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistAction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getExistActionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SelectAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__0__Impl
	rule__SelectAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getSelectKeyword_0()); }

	'select' 

{ after(grammarAccess.getSelectActionAccess().getSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__1__Impl
	rule__SelectAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSelectActionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__2__Impl
	rule__SelectAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getTypeAssignment_2()); }
(rule__SelectAction__TypeAssignment_2)
{ after(grammarAccess.getSelectActionAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__3__Impl
	rule__SelectAction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getSelectActionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__4__Impl
	rule__SelectAction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getNameElementAssignment_4()); }
(rule__SelectAction__NameElementAssignment_4)
{ after(grammarAccess.getSelectActionAccess().getNameElementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getSelectActionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BinaryBooleanExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryBooleanExpression__Group__0__Impl
	rule__BinaryBooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryBooleanExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getOpAssignment_0()); }
(rule__BinaryBooleanExpression__OpAssignment_0)
{ after(grammarAccess.getBinaryBooleanExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryBooleanExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryBooleanExpression__Group__1__Impl
	rule__BinaryBooleanExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryBooleanExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getLeftAssignment_1()); }
(rule__BinaryBooleanExpression__LeftAssignment_1)
{ after(grammarAccess.getBinaryBooleanExpressionAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryBooleanExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryBooleanExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryBooleanExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getRightAssignment_2()); }
(rule__BinaryBooleanExpression__RightAssignment_2)
{ after(grammarAccess.getBinaryBooleanExpressionAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BinaryLogicalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicalExpression__Group__0__Impl
	rule__BinaryLogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getOpAssignment_0()); }
(rule__BinaryLogicalExpression__OpAssignment_0)
{ after(grammarAccess.getBinaryLogicalExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLogicalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicalExpression__Group__1__Impl
	rule__BinaryLogicalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getLeftAssignment_1()); }
(rule__BinaryLogicalExpression__LeftAssignment_1)
{ after(grammarAccess.getBinaryLogicalExpressionAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLogicalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicalExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getRightAssignment_2()); }
(rule__BinaryLogicalExpression__RightAssignment_2)
{ after(grammarAccess.getBinaryLogicalExpressionAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group__0__Impl
	rule__NegationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getNegationAssignment_1()); }
(rule__NegationExpression__NegationAssignment_1)
{ after(grammarAccess.getNegationExpressionAccess().getNegationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Definition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getDefinitionAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getVarIDAssignment_1()); }
(rule__Definition__VarIDAssignment_1)
{ after(grammarAccess.getDefinitionAccess().getVarIDAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getExpAssignment_3()); }
(rule__Definition__ExpAssignment_3)
{ after(grammarAccess.getDefinitionAccess().getExpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignation__Group__0__Impl
	rule__Assignation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignationAccess().getVarAssignment_0()); }
(rule__Assignation__VarAssignment_0)
{ after(grammarAccess.getAssignationAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignation__Group__1__Impl
	rule__Assignation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignationAccess().getExpAssignment_2()); }
(rule__Assignation__ExpAssignment_2)
{ after(grammarAccess.getAssignationAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionalAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getExpAssignment_1()); }
(rule__Conditional__ExpAssignment_1)
{ after(grammarAccess.getConditionalAccess().getExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getConditionalAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getConditionalAccess().getTrueInsAssignment_3()); }
(rule__Conditional__TrueInsAssignment_3)
{ after(grammarAccess.getConditionalAccess().getTrueInsAssignment_3()); }
)
(
{ before(grammarAccess.getConditionalAccess().getTrueInsAssignment_3()); }
(rule__Conditional__TrueInsAssignment_3)*
{ after(grammarAccess.getConditionalAccess().getTrueInsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getGroup_4()); }
(rule__Conditional__Group_4__0)?
{ after(grammarAccess.getConditionalAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getEndifKeyword_5()); }

	'endif' 

{ after(grammarAccess.getConditionalAccess().getEndifKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Conditional__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_4__0__Impl
	rule__Conditional__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getElseKeyword_4_0()); }

	'else' 

{ after(grammarAccess.getConditionalAccess().getElseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getConditionalAccess().getFalseInsAssignment_4_1()); }
(rule__Conditional__FalseInsAssignment_4_1)
{ after(grammarAccess.getConditionalAccess().getFalseInsAssignment_4_1()); }
)
(
{ before(grammarAccess.getConditionalAccess().getFalseInsAssignment_4_1()); }
(rule__Conditional__FalseInsAssignment_4_1)*
{ after(grammarAccess.getConditionalAccess().getFalseInsAssignment_4_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getCondAssignment_2()); }
(rule__While__CondAssignment_2)
{ after(grammarAccess.getWhileAccess().getCondAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getDoKeyword_4()); }

	'do' 

{ after(grammarAccess.getWhileAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWhileAccess().getInsAssignment_5()); }
(rule__While__InsAssignment_5)
{ after(grammarAccess.getWhileAccess().getInsAssignment_5()); }
)
(
{ before(grammarAccess.getWhileAccess().getInsAssignment_5()); }
(rule__While__InsAssignment_5)*
{ after(grammarAccess.getWhileAccess().getInsAssignment_5()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getEndwhileKeyword_6()); }

	'endwhile' 

{ after(grammarAccess.getWhileAccess().getEndwhileKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Foreach__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__0__Impl
	rule__Foreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getForeachKeyword_0()); }

	'foreach' 

{ after(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__1__Impl
	rule__Foreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__2__Impl
	rule__Foreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getVarAssignment_2()); }
(rule__Foreach__VarAssignment_2)
{ after(grammarAccess.getForeachAccess().getVarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__3__Impl
	rule__Foreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getForeachAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__4__Impl
	rule__Foreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getExpAssignment_4()); }
(rule__Foreach__ExpAssignment_4)
{ after(grammarAccess.getForeachAccess().getExpAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__5__Impl
	rule__Foreach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getForeachAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__6__Impl
	rule__Foreach__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getDoKeyword_6()); }

	'do' 

{ after(grammarAccess.getForeachAccess().getDoKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__7__Impl
	rule__Foreach__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getForeachAccess().getInsAssignment_7()); }
(rule__Foreach__InsAssignment_7)
{ after(grammarAccess.getForeachAccess().getInsAssignment_7()); }
)
(
{ before(grammarAccess.getForeachAccess().getInsAssignment_7()); }
(rule__Foreach__InsAssignment_7)*
{ after(grammarAccess.getForeachAccess().getInsAssignment_7()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getEndforKeyword_8()); }

	'endfor' 

{ after(grammarAccess.getForeachAccess().getEndforKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ActionClick__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionClick__Group__0__Impl
	rule__ActionClick__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getClickKeyword_0()); }

	'click' 

{ after(grammarAccess.getActionClickAccess().getClickKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionClick__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionClick__Group__1__Impl
	rule__ActionClick__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getActionClickAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionClick__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionClick__Group__2__Impl
	rule__ActionClick__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getTypeAssignment_2()); }
(rule__ActionClick__TypeAssignment_2)
{ after(grammarAccess.getActionClickAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionClick__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionClick__Group__3__Impl
	rule__ActionClick__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getActionClickAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionClick__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionClick__Group__4__Impl
	rule__ActionClick__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getElementAssignment_4()); }
(rule__ActionClick__ElementAssignment_4)
{ after(grammarAccess.getActionClickAccess().getElementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionClick__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionClick__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getActionClickAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ActionOpen__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionOpen__Group__0__Impl
	rule__ActionOpen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionOpen__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionOpenAccess().getOpenKeyword_0()); }

	'open' 

{ after(grammarAccess.getActionOpenAccess().getOpenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionOpen__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionOpen__Group__1__Impl
	rule__ActionOpen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionOpen__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionOpenAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getActionOpenAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionOpen__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionOpen__Group__2__Impl
	rule__ActionOpen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionOpen__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionOpenAccess().getUrlAssignment_2()); }
(rule__ActionOpen__UrlAssignment_2)
{ after(grammarAccess.getActionOpenAccess().getUrlAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionOpen__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionOpen__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionOpen__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionOpenAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getActionOpenAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ActionCheck__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionCheck__Group__0__Impl
	rule__ActionCheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getCheckKeyword_0()); }

	'check' 

{ after(grammarAccess.getActionCheckAccess().getCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionCheck__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionCheck__Group__1__Impl
	rule__ActionCheck__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getActionCheckAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionCheck__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionCheck__Group__2__Impl
	rule__ActionCheck__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getElementAssignment_2()); }
(rule__ActionCheck__ElementAssignment_2)
{ after(grammarAccess.getActionCheckAccess().getElementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionCheck__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionCheck__Group__3__Impl
	rule__ActionCheck__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getActionCheckAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionCheck__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionCheck__Group__4__Impl
	rule__ActionCheck__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getValueAssignment_4()); }
(rule__ActionCheck__ValueAssignment_4)
{ after(grammarAccess.getActionCheckAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionCheck__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionCheck__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getActionCheckAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ActionType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionType__Group__0__Impl
	rule__ActionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getActionTypeAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionType__Group__1__Impl
	rule__ActionType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getActionTypeAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionType__Group__2__Impl
	rule__ActionType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getNameElementAssignment_2()); }
(rule__ActionType__NameElementAssignment_2)
{ after(grammarAccess.getActionTypeAccess().getNameElementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionType__Group__3__Impl
	rule__ActionType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getActionTypeAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionType__Group__4__Impl
	rule__ActionType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getValueAssignment_4()); }
(rule__ActionType__ValueAssignment_4)
{ after(grammarAccess.getActionTypeAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getActionTypeAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Model__NavigatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNavigatorSelectBrowserParserRuleCall_0_0()); }
	ruleSelectBrowser{ after(grammarAccess.getModelAccess().getNavigatorSelectBrowserParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SubsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubsSubprocedureParserRuleCall_1_0()); }
	ruleSubprocedure{ after(grammarAccess.getModelAccess().getSubsSubprocedureParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getBodyBodyParserRuleCall_3_0()); }
	ruleBody{ after(grammarAccess.getModelAccess().getBodyBodyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectBrowser__BrowserAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectBrowserAccess().getBrowserBROWSERParserRuleCall_1_0()); }
	ruleBROWSER{ after(grammarAccess.getSelectBrowserAccess().getBrowserBROWSERParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__HeadAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getHeadHeadParserRuleCall_1_0()); }
	ruleHead{ after(grammarAccess.getSubprocedureAccess().getHeadHeadParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subprocedure__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprocedureAccess().getBodyBodyParserRuleCall_2_0()); }
	ruleBody{ after(grammarAccess.getSubprocedureAccess().getBodyBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__DefsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getDefsDefinitionParserRuleCall_0_0()); }
	ruleDefinition{ after(grammarAccess.getBodyAccess().getDefsDefinitionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__InstructionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getInstructionsInstructionParserRuleCall_1_0()); }
	ruleInstruction{ after(grammarAccess.getBodyAccess().getInstructionsInstructionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_0_0_0()); }
	ruleFunctionName{ after(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_1_0_0()); }
	ruleFunctionName{ after(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__ArgsIDAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getArgsIDVariableNameParserRuleCall_1_3_0()); }
	ruleVariableName{ after(grammarAccess.getHeadAccess().getArgsIDVariableNameParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__ArgsIDAssignment_1_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getArgsIDVariableNameParserRuleCall_1_4_2_0()); }
	ruleVariableName{ after(grammarAccess.getHeadAccess().getArgsIDVariableNameParserRuleCall_1_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReference__FunctionNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameCrossReference_0()); }
(
{ before(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__RefAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRefFunctionReferenceParserRuleCall_0_0_0()); }
	ruleFunctionReference{ after(grammarAccess.getFunctionCallAccess().getRefFunctionReferenceParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__RefAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRefFunctionReferenceParserRuleCall_1_0_0()); }
	ruleFunctionReference{ after(grammarAccess.getFunctionCallAccess().getRefFunctionReferenceParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_1_3_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VarIDAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameCrossReference_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVarIDVariableNameCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableNameAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableNameAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Uri__UrlAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUriAccess().getUrlURLTerminalRuleCall_0()); }
	RULE_URL{ after(grammarAccess.getUriAccess().getUrlURLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumLiteralExpressionAccess().getValueNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral{ after(grammarAccess.getNumLiteralExpressionAccess().getValueNumberLiteralParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListExpressionAccess().getExpExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getListExpressionAccess().getExpExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getOpBooleanListOperatorParserRuleCall_0_0()); }
	ruleBooleanListOperator{ after(grammarAccess.getBooleanListExpressionAccess().getOpBooleanListOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__VarNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getVarNameVariableNameParserRuleCall_3_0()); }
	ruleVariableName{ after(grammarAccess.getBooleanListExpressionAccess().getVarNameVariableNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanListExpression__ExpAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanListExpressionAccess().getExpExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getBooleanListExpressionAccess().getExpExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpBinaryBooleanExpressionParserRuleCall_0_0()); }
	ruleBinaryBooleanExpression{ after(grammarAccess.getBooleanExpressionAccess().getExpBinaryBooleanExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpNegationExpressionParserRuleCall_1_0()); }
	ruleNegationExpression{ after(grammarAccess.getBooleanExpressionAccess().getExpNegationExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpVerifyActionParserRuleCall_2_0()); }
	ruleVerifyAction{ after(grammarAccess.getBooleanExpressionAccess().getExpVerifyActionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpExistActionParserRuleCall_3_0()); }
	ruleExistAction{ after(grammarAccess.getBooleanExpressionAccess().getExpExistActionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpBooleanListExpressionParserRuleCall_4_0()); }
	ruleBooleanListExpression{ after(grammarAccess.getBooleanExpressionAccess().getExpBooleanListExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpBooleanValueParserRuleCall_5_0()); }
	ruleBooleanValue{ after(grammarAccess.getBooleanExpressionAccess().getExpBooleanValueParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpBinaryLogicalExpressionParserRuleCall_6_0()); }
	ruleBinaryLogicalExpression{ after(grammarAccess.getBooleanExpressionAccess().getExpBinaryLogicalExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getExpVariableReferenceParserRuleCall_7_0()); }
	ruleVariableReference{ after(grammarAccess.getBooleanExpressionAccess().getExpVariableReferenceParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__VerifyTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getVerifyTypeVerifiableElementParserRuleCall_2_0()); }
	ruleVerifiableElement{ after(grammarAccess.getVerifyActionAccess().getVerifyTypeVerifiableElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__NameElementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getNameElementExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getVerifyActionAccess().getNameElementExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerifyAction__ValueAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyActionAccess().getValueExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getVerifyActionAccess().getValueExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__SelectAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getSelectSelectableElementParserRuleCall_2_0()); }
	ruleSelectableElement{ after(grammarAccess.getExistActionAccess().getSelectSelectableElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistAction__NameElementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistActionAccess().getNameElementExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getExistActionAccess().getNameElementExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getTypeSelectableElementParserRuleCall_2_0()); }
	ruleSelectableElement{ after(grammarAccess.getSelectActionAccess().getTypeSelectableElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__NameElementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getNameElementExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getSelectActionAccess().getNameElementExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryBooleanExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getOpBooleanOperatorParserRuleCall_0_0()); }
	ruleBooleanOperator{ after(grammarAccess.getBinaryBooleanExpressionAccess().getOpBooleanOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryBooleanExpression__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getLeftExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getBinaryBooleanExpressionAccess().getLeftExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryBooleanExpression__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryBooleanExpressionAccess().getRightExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getBinaryBooleanExpressionAccess().getRightExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
	ruleLogicalOperator{ after(grammarAccess.getBinaryLogicalExpressionAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExpression__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getLeftBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getBinaryLogicalExpressionAccess().getLeftBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExpression__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalExpressionAccess().getRightBooleanExpressionParserRuleCall_2_0()); }
	ruleBooleanExpression{ after(grammarAccess.getBinaryLogicalExpressionAccess().getRightBooleanExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__NegationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getNegationBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getNegationExpressionAccess().getNegationBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__VarIDAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getVarIDVariableNameParserRuleCall_1_0()); }
	ruleVariableName{ after(grammarAccess.getDefinitionAccess().getVarIDVariableNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getExpExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getDefinitionAccess().getExpExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignationAccess().getVarVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getAssignationAccess().getVarVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignationAccess().getExpExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignationAccess().getExpExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getExpBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getConditionalAccess().getExpBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__TrueInsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getTrueInsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getConditionalAccess().getTrueInsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__FalseInsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getFalseInsInstructionParserRuleCall_4_1_0()); }
	ruleInstruction{ after(grammarAccess.getConditionalAccess().getFalseInsInstructionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__CondAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getCondBooleanExpressionParserRuleCall_2_0()); }
	ruleBooleanExpression{ after(grammarAccess.getWhileAccess().getCondBooleanExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__InsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getInsInstructionParserRuleCall_5_0()); }
	ruleInstruction{ after(grammarAccess.getWhileAccess().getInsInstructionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__VarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getVarVariableNameParserRuleCall_2_0()); }
	ruleVariableName{ after(grammarAccess.getForeachAccess().getVarVariableNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__ExpAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getExpExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getForeachAccess().getExpExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__InsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getInsInstructionParserRuleCall_7_0()); }
	ruleInstruction{ after(grammarAccess.getForeachAccess().getInsInstructionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionInstruction__ActionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionInstructionAccess().getActionActionOpenParserRuleCall_0_0()); }
	ruleActionOpen{ after(grammarAccess.getActionInstructionAccess().getActionActionOpenParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionInstruction__ActionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionInstructionAccess().getActionActionClickParserRuleCall_1_0()); }
	ruleActionClick{ after(grammarAccess.getActionInstructionAccess().getActionActionClickParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionInstruction__ActionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionInstructionAccess().getActionActionCheckParserRuleCall_2_0()); }
	ruleActionCheck{ after(grammarAccess.getActionInstructionAccess().getActionActionCheckParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionInstruction__ActionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionInstructionAccess().getActionActionTypeParserRuleCall_3_0()); }
	ruleActionType{ after(grammarAccess.getActionInstructionAccess().getActionActionTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getTypeClickableElementParserRuleCall_2_0()); }
	ruleClickableElement{ after(grammarAccess.getActionClickAccess().getTypeClickableElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionClick__ElementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionClickAccess().getElementExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getActionClickAccess().getElementExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionOpen__UrlAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionOpenAccess().getUrlExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getActionOpenAccess().getUrlExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__ElementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getElementExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getActionCheckAccess().getElementExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCheck__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionCheckAccess().getValueBooleanExpressionParserRuleCall_4_0()); }
	ruleBooleanExpression{ after(grammarAccess.getActionCheckAccess().getValueBooleanExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__NameElementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getNameElementExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getActionTypeAccess().getNameElementExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionType__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTypeAccess().getValueExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getActionTypeAccess().getValueExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOLEAN : ('true'|'false');

RULE_URL : ('a'..'z')+ '://' (('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+|('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')* ('.' ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)*) (':' ('0'..'9')+)? ('/' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'~'|'+'|'.'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)* ('?' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+ ('+' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+)*)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


